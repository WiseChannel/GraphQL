1
00:00:00,810 --> 00:00:07,140
In the last section we uncovered a big issue around the way that Appollo fetches data for our application.

2
00:00:07,140 --> 00:00:12,990
We found that if we went directly to the song list fetched the list of songs and then went to create

3
00:00:12,990 --> 00:00:20,120
a new song the newly created song would not appear on the list because the query would not be executed.

4
00:00:20,180 --> 00:00:25,500
In the words Apollo did not go back to the server and say hey give me that big list of data again I

5
00:00:25,500 --> 00:00:27,090
want to hear more about.

6
00:00:27,150 --> 00:00:30,830
So in this section we're going to figure out how to address this.

7
00:00:30,900 --> 00:00:32,850
Now the Apollo team is not crazy.

8
00:00:32,850 --> 00:00:36,140
They absolutely know that this is outstanding.

9
00:00:36,270 --> 00:00:38,530
I don't quite what to say bugger issue.

10
00:00:38,820 --> 00:00:44,340
I should say that they know that this is something that people want to fix inside their applications

11
00:00:44,640 --> 00:00:52,100
and so they've made a very easy tool for allowing us to re fetch a query after we have ran a mutation.

12
00:00:52,200 --> 00:00:55,050
So I'm inside of my song create file right now.

13
00:00:55,140 --> 00:01:01,530
I'm not the consummate handler and I've got my nutation right here the mutation.

14
00:01:01,530 --> 00:01:05,160
Right now we are passing it a single property of variables.

15
00:01:05,190 --> 00:01:10,010
And if you recall this is a variable to inject into the actual query to customize.

16
00:01:10,150 --> 00:01:16,230
Or I should say the mutation to customize the way in which the mutation runs this query object that

17
00:01:16,230 --> 00:01:26,580
we're passing to the mutate function takes another property that we call rief fetch queries the refits

18
00:01:26,580 --> 00:01:33,540
queries property will take an array of queries so we can pass it a list of different queries that is

19
00:01:33,530 --> 00:01:38,960
sure to rerun automatically after the mutation is successfully executed.

20
00:01:39,120 --> 00:01:44,940
So we can pass the query that we want to run directly into this thing right here and poof query will

21
00:01:44,970 --> 00:01:52,210
automatically rerun after this file or zoomie after the mutation has been successfully completed.

22
00:01:52,590 --> 00:01:54,060
So that's pretty much what we're going to do.

23
00:01:54,060 --> 00:01:59,570
We're going to say after you've ran successfully rerun the query to fetch the list of songs.

24
00:01:59,910 --> 00:02:05,850
Now the only kind of interesting part about this is that when we are passing in a specific query right

25
00:02:05,850 --> 00:02:13,920
here we are passing in the actual query like the actual graph QOL or graph you old tag Querrey.

26
00:02:13,950 --> 00:02:16,680
So this little bit right here.

27
00:02:17,040 --> 00:02:23,010
So we have to pass in this exact query to that new tape function to let us know exactly what it needs

28
00:02:23,010 --> 00:02:25,040
to rerun.

29
00:02:25,080 --> 00:02:29,820
So in practice we generally do not duplicate queries throughout our code base.

30
00:02:29,850 --> 00:02:35,460
So if I write a query inside of my love song lists component write here to fetch my list of songs I

31
00:02:35,460 --> 00:02:38,130
don't want to be copy pasting this all over the place.

32
00:02:38,160 --> 00:02:43,290
I want to just write at one time and then be able to have to refer to it from different locations in

33
00:02:43,290 --> 00:02:44,880
my code base.

34
00:02:44,910 --> 00:02:50,820
So a very common convention that you'll see in graph CULE applications is to pull queries just like

35
00:02:50,820 --> 00:02:57,210
this one right here into a separate file and then import it whenever we need to get access to this query

36
00:02:57,450 --> 00:02:59,710
and that's exactly the approach we'll take.

37
00:02:59,820 --> 00:03:04,120
We're going to declare this query right here inside of a separate file and then we will.

38
00:03:04,350 --> 00:03:10,100
Imported into the song list component and make use of it in here and we'll import it into the song create

39
00:03:10,110 --> 00:03:12,590
component and make use of it in here as well.

40
00:03:12,840 --> 00:03:14,790
So let's get to it.

41
00:03:14,820 --> 00:03:21,210
I like to stick all of the different queries that I write into a single folder called as you might expect

42
00:03:21,690 --> 00:03:23,320
queries.

43
00:03:23,320 --> 00:03:29,040
So I going to make a few queries folder inside of my client directory and then inside of there I'm going

44
00:03:29,040 --> 00:03:33,590
to make a new query file called fetch songs.

45
00:03:33,700 --> 00:03:34,350
Yes.

46
00:03:34,380 --> 00:03:36,730
So it is going to be a javascript file.

47
00:03:37,290 --> 00:03:46,440
Then inside of here we can import the GQ l library from graph Cuil tag and then we can immediately export

48
00:03:46,470 --> 00:03:49,890
defaults heart query.

49
00:03:50,160 --> 00:03:51,900
So we're going to call GQ out.

50
00:03:51,990 --> 00:03:55,970
We're going to assign the query string or excuse me a template string.

51
00:03:55,980 --> 00:04:00,110
Do remember you have to use back ticks here and then we'll define our query.

52
00:04:00,120 --> 00:04:04,680
So we'll say songs with ID and title like so.

53
00:04:05,080 --> 00:04:11,100
So now I can import this file anywhere into my project and always be making use of the exact same query

54
00:04:11,340 --> 00:04:15,300
without having to rewrite it or copy paste it all over the place.

55
00:04:15,600 --> 00:04:20,580
So let's import it into both the files that we now want to use it in and make sure we are you are using

56
00:04:20,580 --> 00:04:25,860
the separate query file as opposed to the inline one that we currently have.

57
00:04:25,920 --> 00:04:27,210
So we're going to start first.

58
00:04:27,210 --> 00:04:31,710
Let's start first inside of song list and make this one work first.

59
00:04:31,820 --> 00:04:39,570
So I'm going to go all the way up to the top and I'll import Querrey from up one directory.

60
00:04:39,690 --> 00:04:50,100
So dot dot slash queries fetch songs and then down at the bottom I'm going to scroll all the way down

61
00:04:50,240 --> 00:04:54,500
I'm going to clean up the existing inline query that we have in here right now.

62
00:04:55,860 --> 00:05:01,770
And I don't need to modify anything in here because I named the import query as well.

63
00:05:01,770 --> 00:05:06,860
It might be a little bit better to rename this to the fetch songs query or something like that.

64
00:05:06,900 --> 00:05:11,730
Maybe that's approach that we'll take at some point in the future but for right now I'm totally fine

65
00:05:11,730 --> 00:05:15,870
just calling it Querrey it's going to save this file.

66
00:05:15,930 --> 00:05:21,720
Close it and then we will also do a little bit of refactor inside of song create as well.

67
00:05:21,720 --> 00:05:28,050
So inside of song create we will import queery from up one directory.

68
00:05:28,080 --> 00:05:32,440
So dot dot slash Aquarius batch songs.

69
00:05:35,920 --> 00:05:40,570
Now the last thing to do is inform the fecche queries array.

70
00:05:40,890 --> 00:05:43,460
We're going to say Querrey is queery.

71
00:05:43,780 --> 00:05:52,020
So the objects that we pass in here take two properties the query property and a variable's property.

72
00:05:52,090 --> 00:05:57,570
So variables right here is the exact same thing that we were doing previously down inside the mutation

73
00:05:58,960 --> 00:06:02,420
has many variables right here literally a line above what we're doing right now.

74
00:06:02,470 --> 00:06:04,470
It is the exact same purpose.

75
00:06:04,480 --> 00:06:09,940
So if this query that we are executing right here had some number of variables that it needed to run

76
00:06:10,180 --> 00:06:12,520
we could pass them in directly right here as well.

77
00:06:12,700 --> 00:06:17,200
But in this case our fetch songs query does not have any variables associated with it.

78
00:06:17,320 --> 00:06:23,560
So we don't need to pass in any variables the query itself needs to be assigned to the query property.

79
00:06:23,560 --> 00:06:28,690
And in this case this is why it's kind of nice to call the import just query because we can use a little

80
00:06:28,690 --> 00:06:34,570
bit of E-6 to shorten this up because the key and the value are identical.

81
00:06:34,570 --> 00:06:39,020
We can condense this down to just the query like so.

82
00:06:39,100 --> 00:06:43,960
So now our order of operations is that when we issue the mutation.

83
00:06:43,960 --> 00:06:45,680
The mutation is going to run.

84
00:06:45,890 --> 00:06:52,540
We're going to immediately attempt to re fetch the fecche songs query and then our user is going to

85
00:06:52,540 --> 00:06:57,670
be forcibly redirected over to the route of our application.

86
00:06:57,670 --> 00:07:04,030
Now the last thing you might be curious about is whether or not our query is going to be attempted to

87
00:07:04,030 --> 00:07:06,390
be fetched twice.

88
00:07:06,390 --> 00:07:11,400
So note that we're saying OK after mutation runs we're going to rerun this query right here.

89
00:07:11,500 --> 00:07:16,900
But we've also established that when our component shows up on the screen it does run the query that

90
00:07:16,900 --> 00:07:17,790
is attached to it.

91
00:07:17,800 --> 00:07:23,190
So the song list will attempt to fetch the list of songs using that same query as well.

92
00:07:23,320 --> 00:07:27,600
It would obviously not be ideal to run the same query in parallel.

93
00:07:27,600 --> 00:07:29,860
It would be just total waste of resources.

94
00:07:30,070 --> 00:07:36,160
Fortunately graph Q L or I should say Apollo correctly identifies that it is already running this query

95
00:07:36,190 --> 00:07:41,380
and so it will not attempt to issue the same exact query twice in a row which is exactly what we would

96
00:07:41,380 --> 00:07:43,060
hope to have happen.

97
00:07:43,580 --> 00:07:48,600
Okay I think we're about ready for a little bit of test here so I'm going to open up.

98
00:07:49,050 --> 00:07:52,990
Let's first open up our Turnell and just make sure that we don't have any typos or anything like that

99
00:07:52,990 --> 00:07:53,550
in here.

100
00:07:53,680 --> 00:07:56,140
So everything in here looks good for me.

101
00:07:56,140 --> 00:08:00,220
I'll then go back to my application all refresh the page.

102
00:08:00,220 --> 00:08:06,750
You'll notice that the query ran successfully on on my network tab of my Croman Specter right now and

103
00:08:06,760 --> 00:08:13,420
it looks like we issued one request to the graph Q L back and I will then go and create a new song and

104
00:08:13,420 --> 00:08:21,250
we'll give this one the title of in lab rock whatever.

105
00:08:21,510 --> 00:08:22,710
We'll send it off.

106
00:08:22,710 --> 00:08:26,930
We immediately see the new song appear on the screen which is fantastic.

107
00:08:27,090 --> 00:08:33,480
And you'll also notice that we only issued two requests to our graphics Well backend which is the absolute

108
00:08:33,480 --> 00:08:37,600
minimum for making this operation work the way we expect.

109
00:08:37,860 --> 00:08:43,380
The first request direct here was the one that we initially made when we loaded up our application so

110
00:08:43,380 --> 00:08:51,130
it fetched a list of songs as it existed before we added the in lab rock song we then random mutation.

111
00:08:51,180 --> 00:08:52,620
So here's the mutation right here.

112
00:08:52,620 --> 00:08:56,630
We can see the mutation is called add song and then graft.

113
00:08:56,670 --> 00:09:03,130
Well I should say again Apollo automatically refreshed or reran the query to get our list of songs.

114
00:09:03,330 --> 00:09:10,710
And in here we can easily see that we got the response of in lab rock and most importantly the query

115
00:09:10,710 --> 00:09:14,550
was only issued to our back and exactly one time.

116
00:09:15,070 --> 00:09:15,900
OK.

117
00:09:16,260 --> 00:09:21,420
So that's pretty much it with handling lists and refurbishing lists after we've modified them.

118
00:09:21,420 --> 00:09:27,720
Again the reminder here is that we need to make sure that whenever we insert a new record to a list

119
00:09:27,720 --> 00:09:33,790
of data we might have to refence the query that is associated with Otherwise.

120
00:09:34,290 --> 00:09:40,540
Otherwise Paulo is going to decide inside and fetch that query I don't have to do any more work.

121
00:09:41,200 --> 00:09:44,880
OK let's go ahead and continue in the next section.

