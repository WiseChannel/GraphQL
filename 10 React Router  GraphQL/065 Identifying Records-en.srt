1
00:00:00,800 --> 00:00:06,450
In the last section we were working on the render lyrics helper and I'd said that well it looks like

2
00:00:06,450 --> 00:00:09,280
there was a little bit of a CSSA styling issue here.

3
00:00:09,360 --> 00:00:11,430
That was a total oversight on my part.

4
00:00:11,460 --> 00:00:17,280
I just completely neglected to hook up the render lyrics helper method to the render method inside of

5
00:00:17,280 --> 00:00:18,510
our component.

6
00:00:18,510 --> 00:00:23,610
So we're going to do that last step right here rather than showing the hard coded lyric list text that

7
00:00:23,610 --> 00:00:24,630
we have right now.

8
00:00:24,690 --> 00:00:28,180
I'm going to replace that with a call to render lyrics.

9
00:00:28,320 --> 00:00:31,690
So we'll say this dot render lyrics like so

10
00:00:34,440 --> 00:00:37,050
now we're probably ready to test this out in the browser.

11
00:00:37,220 --> 00:00:41,340
I'm going to flip back over or refresh the page and.

12
00:00:41,400 --> 00:00:41,790
OK.

13
00:00:41,820 --> 00:00:43,310
That looks much more reasonable.

14
00:00:43,320 --> 00:00:44,230
Looks good.

15
00:00:44,640 --> 00:00:47,450
So I've got my list of lyrics appearing on the screen.

16
00:00:47,670 --> 00:00:53,010
So I think we're about ready to test out the entire flow of adding a lyric right here and then hopefully

17
00:00:53,100 --> 00:00:55,270
seeing it appear in a list.

18
00:00:55,620 --> 00:00:59,550
So I want to ask you a question before we do that however and this is something that we've done a couple

19
00:00:59,550 --> 00:01:00,500
of times now.

20
00:01:00,720 --> 00:01:07,920
I want to ask you when we add a lyric here we add a lyric to this song presumably so it will show up

21
00:01:07,920 --> 00:01:09,090
on this list.

22
00:01:09,090 --> 00:01:13,970
Do you expect the lyric to automatically appear on this list right here.

23
00:01:14,010 --> 00:01:15,270
Do you expect that to happen.

24
00:01:15,270 --> 00:01:17,410
I want you to think about that in your head.

25
00:01:17,880 --> 00:01:18,580
I'm going to put it.

26
00:01:18,630 --> 00:01:22,250
Larry can I say what a sight.

27
00:01:22,300 --> 00:01:24,700
And I'll press enter to submit it.

28
00:01:24,720 --> 00:01:29,510
I see that the mutation in my request log over here was successful.

29
00:01:29,760 --> 00:01:35,850
So we definitely submitted a lyric and it definitely was saved by the back end server but it did not

30
00:01:35,910 --> 00:01:40,680
automatically appear on the list right here which is not super ideal.

31
00:01:40,680 --> 00:01:46,650
I obviously really want to have any new piece of data automatically appear on the list.

32
00:01:46,650 --> 00:01:53,040
Let's refresh the page that will rerun this query right here and we'll just ensure that the lyric was

33
00:01:53,040 --> 00:01:54,840
actually added to the song.

34
00:01:55,320 --> 00:01:56,750
So refresh OK.

35
00:01:56,790 --> 00:01:58,210
So it's definitely there.

36
00:01:58,740 --> 00:02:02,200
So what's going wrong here and how can we fix up this behavior.

37
00:02:02,440 --> 00:02:04,140
Well I want to run one more mutation.

38
00:02:04,140 --> 00:02:09,630
I'm going to say what a night that works.

39
00:02:09,670 --> 00:02:12,290
I just want to have this mutation right here in the log.

40
00:02:12,300 --> 00:02:16,240
Because I'm going to come back and referred to the mutation in just a moment so to make sure that's

41
00:02:16,250 --> 00:02:17,560
there for right now.

42
00:02:17,970 --> 00:02:20,440
So let's think a little bit about how to solve this issue.

43
00:02:20,470 --> 00:02:26,880
We're adding a new Lerat does not update the list of lyrics inside the component itself.

44
00:02:26,970 --> 00:02:33,270
We've dealt with this one time before inside of this project inside of our song create components.

45
00:02:33,500 --> 00:02:34,930
Here's a song create.

46
00:02:35,010 --> 00:02:36,780
We had our mutation.

47
00:02:36,780 --> 00:02:38,240
Here's the mutation right here.

48
00:02:38,370 --> 00:02:45,810
And we had said that after the mutation was successfully executed Apollo should automatically rerun

49
00:02:45,810 --> 00:02:52,680
this query and the query was to fetch our list of songs and then rerun render the song list component.

50
00:02:52,680 --> 00:02:58,470
So that's how we took care of this situation in the past we said mutations done rerun that query get

51
00:02:58,470 --> 00:03:01,250
the list of songs pre-rendered the song list component.

52
00:03:01,290 --> 00:03:02,760
And that seemed pretty straightforward.

53
00:03:02,790 --> 00:03:06,940
That was definitely palatable definitely something that seemed to work appropriately.

54
00:03:08,830 --> 00:03:13,440
Now we certainly could take this approach this time around for fixing our lyric list.

55
00:03:13,480 --> 00:03:15,280
I want to make that really clear right now.

56
00:03:15,280 --> 00:03:20,340
We absolutely could take this approach right here but we're going to do something just a little bit

57
00:03:20,350 --> 00:03:27,950
different because it's going to allow us to learn a lot more about how Apollo works internally.

58
00:03:28,130 --> 00:03:34,090
So we're going to look at a different approach for fetching and updating our data after we call some

59
00:03:34,090 --> 00:03:35,590
mutation.

60
00:03:35,590 --> 00:03:38,370
Let's talk about exactly how it's going to work.

61
00:03:38,820 --> 00:03:43,270
So the first thing I want to do is take a look at a diagram that can help us understand a little bit

62
00:03:43,270 --> 00:03:47,160
more about how Apollo stores data internally.

63
00:03:47,170 --> 00:03:51,090
So this is a diagram of my Appollo store or my Appollo client.

64
00:03:51,130 --> 00:03:57,850
Remember we set this thing up inside of our index not just for file and passed it to the Apollo provider

65
00:03:57,850 --> 00:03:58,960
component.

66
00:03:58,960 --> 00:04:00,970
So we created this thing right here.

67
00:04:00,970 --> 00:04:07,360
It exists inside of our application the Apollo store or Apollo client whichever you want to call it

68
00:04:07,840 --> 00:04:10,210
has internal buckets of data.

69
00:04:10,210 --> 00:04:17,410
So it has a internal list of songs and an internal list of lyrics and knows how to go out and fetch

70
00:04:17,410 --> 00:04:23,620
data from our graph to server and then store all the data that comes back in the query inside of one

71
00:04:23,620 --> 00:04:24,920
of these buckets.

72
00:04:25,300 --> 00:04:32,710
The pulse store knows which bucket to place this data in specifically because every every response that

73
00:04:32,710 --> 00:04:39,070
we get back from the server adds in a little field on the response that says what type of data was just

74
00:04:39,070 --> 00:04:39,820
fetched.

75
00:04:40,000 --> 00:04:41,670
So here's a mutation right here.

76
00:04:41,830 --> 00:04:49,000
It says that we just fetched a top a song type and it has an ID of and so and then every single lyric

77
00:04:49,120 --> 00:04:52,050
also has a type name annotation on here.

78
00:04:52,180 --> 00:04:56,640
So Appollo clearly knows what type of data it's fetching at all times.

79
00:04:56,830 --> 00:05:01,870
And that's exactly how it knows where to stuff each piece of data that it fetches from the back end

80
00:05:02,350 --> 00:05:06,520
and grabs and puts into our application.

81
00:05:06,520 --> 00:05:08,980
So that's a little bit about what's going on the Apollo store.

82
00:05:08,980 --> 00:05:15,040
Now let's talk about the shortcomings of what is going on right now as our Apollo applications set up.

83
00:05:15,430 --> 00:05:21,880
The shortcoming of our current approach for how we're doing everything is that Apollo has absolutely

84
00:05:22,060 --> 00:05:30,250
no idea about what data and what property what properties exist inside of each of these models or each

85
00:05:30,250 --> 00:05:32,310
of these records that are sitting in the store.

86
00:05:32,580 --> 00:05:35,270
And that's what I'm trying to indicate by the little squiggly here.

87
00:05:35,500 --> 00:05:41,710
Apollo just does not know what piece of data this is right here it doesn't know what is sitting inside

88
00:05:41,710 --> 00:05:41,890
of it.

89
00:05:41,890 --> 00:05:44,100
It doesn't know what attributes it has.

90
00:05:44,100 --> 00:05:48,530
It has no way of identifying this very particular song right here.

91
00:05:48,910 --> 00:05:53,890
And that's kind of the root of what's going wrong with our current setup for refreshing data in the

92
00:05:53,890 --> 00:05:55,000
application.

93
00:05:55,360 --> 00:05:59,040
Let's take a look at the mutation that we just issued one more time.

94
00:05:59,830 --> 00:06:02,170
So here's the mutation that we just issued.

95
00:06:02,380 --> 00:06:06,750
We added on this last leared down here of what a night.

96
00:06:06,760 --> 00:06:12,850
So notice how there's only three lyrics on the page but we have fetched very clearly for lyrics right

97
00:06:12,850 --> 00:06:13,420
here.

98
00:06:13,600 --> 00:06:19,480
So there's absolutely no reason that Apollo could not know that this song.

99
00:06:19,810 --> 00:06:23,160
The song Hello Slim has four lyrics.

100
00:06:23,260 --> 00:06:26,070
Here's the song and here's the lyrics.

101
00:06:26,130 --> 00:06:29,950
It's you kind of want to slap Appollo upside the head and say hey what are you doing.

102
00:06:29,950 --> 00:06:32,470
I know that you know that there's four lyrics here.

103
00:06:32,500 --> 00:06:34,820
Why won't you update my component for me.

104
00:06:34,840 --> 00:06:41,370
But again the issue is that Apollo has no way of recognizing that the data that we just fetched strike

105
00:06:41,370 --> 00:06:47,560
here like this very particular song is related to the song that is on the screen because it has no way

106
00:06:47,560 --> 00:06:52,690
of actually identifying the records that are being retrieved by our graphical server.

107
00:06:52,870 --> 00:06:57,850
And that's the big core issue to fix this issue.

108
00:06:57,850 --> 00:07:02,570
We're going to make use of a little piece of configuration in the Apollo client.

109
00:07:03,160 --> 00:07:09,220
This piece of configuration is going to take all the different records we fetch and it's going to instruct

110
00:07:09,280 --> 00:07:10,410
Apollo that.

111
00:07:10,440 --> 00:07:10,800
OK.

112
00:07:10,810 --> 00:07:14,530
When we fetched this song give this song an idea of one.

113
00:07:14,590 --> 00:07:18,150
And this song and ID of two and this song an idea of three.

114
00:07:18,160 --> 00:07:22,540
And when he fetched some lyrics I want you to know that this lyric has an idea of 20 and this one has

115
00:07:22,540 --> 00:07:29,330
an idea of 21 by telling Apollo a little bit more about the identity of every single record.

116
00:07:29,360 --> 00:07:36,070
We've we fetch Apollo can then bond with the re-act side of our application much more easily and say

117
00:07:36,460 --> 00:07:44,750
oh I see that that component right there is making use of song with ID one if any data associated with

118
00:07:44,750 --> 00:07:47,050
the song of ID one gets updated.

119
00:07:47,200 --> 00:07:52,930
Then I'm going to inform the re-act side of our application that that piece of data was just updated

120
00:07:53,110 --> 00:07:54,700
and it needs to re render.

121
00:07:55,030 --> 00:07:56,970
So that's the crux of the whole thing here.

122
00:07:57,040 --> 00:08:04,090
By identifying each piece of data that gets stored in our application at the Apollo client can then

123
00:08:04,120 --> 00:08:08,990
inform the react side of our application when any little data is updated.

124
00:08:09,070 --> 00:08:13,790
So let's walk through this process just one time and then we'll go through the implementation.

125
00:08:13,810 --> 00:08:21,010
So this is a series of steps going down when we fetch a list of lyrics or excuse me we initially fetch

126
00:08:21,010 --> 00:08:27,130
a list of lyrics and then we create a new lyric when we create that new lyric that mutation that comes

127
00:08:27,130 --> 00:08:32,000
back really fetches the entire song and all the lyrics associated with it.

128
00:08:32,170 --> 00:08:36,310
And that's what we just saw here inside of our mutation log or a request log.

129
00:08:36,310 --> 00:08:42,030
We saw that the song was re fetched and all the lyrics with it are associated with it were reforged

130
00:08:42,040 --> 00:08:42,860
as well.

131
00:08:45,480 --> 00:08:50,340
Because Appollo sees that song with I-T Fife and I'm just making up that idea.

132
00:08:50,350 --> 00:08:56,850
5 right now we're just going to say OK this particular song was updated Appollo says ah this song with

133
00:08:56,910 --> 00:09:04,080
idea 5 was updated and he reacts components out there that are making use of song with ID 5 need to

134
00:09:04,080 --> 00:09:05,090
re render.

135
00:09:05,090 --> 00:09:10,440
And so then Appollo can correctly tell the re-act side of our application that it needs to rerun under

136
00:09:10,440 --> 00:09:12,530
some set of components.

137
00:09:13,150 --> 00:09:13,640
OK.

138
00:09:13,710 --> 00:09:19,730
So that's kind of the breakdown on what's happening a little bit with the internals of the Apollo client.

139
00:09:19,770 --> 00:09:25,290
It's really important to make sure that all these data updates propagate around our application to make

140
00:09:25,290 --> 00:09:31,370
sure that we somehow identify each record that gets fed by the Apollo clients.

141
00:09:31,390 --> 00:09:36,650
So let's figure out how we're going to do that identikit identification step in the next section we'll

142
00:09:36,660 --> 00:09:41,130
do the implementation and we'll test everything out and make sure that it all works the way we expect.

143
00:09:41,400 --> 00:09:45,570
So take a quick break and then go through the implementation and get this working.

144
00:09:45,750 --> 00:09:47,130
I'll see in just a second.

