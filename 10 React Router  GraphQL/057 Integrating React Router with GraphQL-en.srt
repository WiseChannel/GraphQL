1
00:00:00,660 --> 00:00:05,970
Now that we've got our Querrey put together it's time to take the query take the component and sandwich

2
00:00:05,970 --> 00:00:11,100
them together to make sure the query actually executes and grab some information about the currently

3
00:00:11,100 --> 00:00:15,320
viewed song sung flip back over to my song detail component.

4
00:00:15,330 --> 00:00:16,020
Here we go.

5
00:00:16,240 --> 00:00:21,640
And at the top I'm going to start by importing the graft helper function from re-act Apollo and then

6
00:00:21,640 --> 00:00:24,910
will also import the query that we just wrote as well.

7
00:00:25,260 --> 00:00:32,400
So import graft well from re-act Apollo remember this is the helper that we use to sandwich together

8
00:00:32,400 --> 00:00:44,850
a query and to react component and then we'll also import fecche song that's that song from up one directory

9
00:00:45,210 --> 00:00:48,300
queries that song like so.

10
00:00:48,420 --> 00:00:53,880
And to make sure that you've got fecche song singular We are only fetching one song here we are not

11
00:00:53,880 --> 00:00:55,450
fetching multiple songs

12
00:00:58,150 --> 00:01:00,640
we've now got the helper we've got the query.

13
00:01:00,670 --> 00:01:06,220
The last thing that we have to think about is how we get the ID of the current song that the user wants

14
00:01:06,220 --> 00:01:07,110
to see.

15
00:01:07,480 --> 00:01:13,270
So as a reminder we have declared inside of our re-act router application the reactor router side of

16
00:01:13,270 --> 00:01:13,730
things.

17
00:01:13,750 --> 00:01:16,150
So I'm inside of index not J.S. Right now.

18
00:01:16,450 --> 00:01:18,060
Here's the router file.

19
00:01:18,250 --> 00:01:25,420
Here's our routes and we had said that whenever a user goes to songs slash something we want to show

20
00:01:25,600 --> 00:01:26,590
this song.

21
00:01:26,620 --> 00:01:28,480
The idea of this song right here.

22
00:01:28,480 --> 00:01:33,770
So I would expect to have you or else Flury round of something like songs slash one or song such two

23
00:01:33,790 --> 00:01:35,910
three four five and so on.

24
00:01:36,670 --> 00:01:39,480
So this is a little bit on the react rather side of things.

25
00:01:39,550 --> 00:01:44,620
I just want to make sure that it's really clear how we get this piece of data down into our component

26
00:01:44,890 --> 00:01:46,720
and to make sure that that is really clear.

27
00:01:46,750 --> 00:01:52,680
I want to flip back over to the song detail and place a console log in here of this dock process.

28
00:01:52,870 --> 00:01:58,030
It's going to in just a second it's going to be really important that we understand where that song

29
00:01:58,030 --> 00:01:59,290
idea is coming from.

30
00:01:59,290 --> 00:02:04,970
So again I just want to make sure that it is crystal clear how we are getting access to that song ID.

31
00:02:05,350 --> 00:02:12,490
So I've got to log in here and I'm going to flip back over and refreshed the component refresh of the

32
00:02:12,490 --> 00:02:13,140
page.

33
00:02:13,250 --> 00:02:13,490
OK.

34
00:02:13,510 --> 00:02:15,520
So here's our console log.

35
00:02:15,610 --> 00:02:18,440
This is council logging the entire prop's object.

36
00:02:18,460 --> 00:02:23,350
And you'll notice that we've already got a ton of props available on here just as a reminder these are

37
00:02:23,350 --> 00:02:28,520
all the normal props that I would expect to see from a component that has been rendered by re-act router.

38
00:02:28,690 --> 00:02:32,710
So these are all props that are associated with re-act router.

39
00:02:32,710 --> 00:02:37,700
The most important prop that we care about is the harams object right here.

40
00:02:38,050 --> 00:02:42,180
So it says Paramo with an ID of one.

41
00:02:42,730 --> 00:02:47,900
This is ID specifically because an R U R L or R route definition we had said yeah.

42
00:02:47,920 --> 00:02:52,350
Take this last piece of the you are right here and we said Colin ID.

43
00:02:52,510 --> 00:02:59,470
So because we said Colin ID it takes ID and adds it as a per Parama to our programs object or a property

44
00:02:59,470 --> 00:03:01,410
to our programs object.

45
00:03:02,110 --> 00:03:08,270
So again I just want to make sure it's really clear on exactly where that piece of data is coming from.

46
00:03:08,290 --> 00:03:12,670
Now the last thing I want to do before we wire up our query is I want to make sure that we are using

47
00:03:12,700 --> 00:03:15,840
a real ID appear so song.

48
00:03:15,910 --> 00:03:22,420
Or the idea of a real song that is saved in our database so we can get a real ID by flipping back over

49
00:03:22,420 --> 00:03:23,440
to graphical.

50
00:03:23,680 --> 00:03:29,230
Remember we just had a query in here where we fetched the idea of a record that was already saved to

51
00:03:29,230 --> 00:03:30,160
our database.

52
00:03:30,310 --> 00:03:36,190
So I want to use this ID right here so that when we actually make our query we get some real data back

53
00:03:36,190 --> 00:03:37,370
from our server.

54
00:03:37,570 --> 00:03:44,940
If we run our query right now with the fake ID of songs 1 we dont have any song with idea of one.

55
00:03:44,950 --> 00:03:47,490
And so that would return a air from our back end.

56
00:03:47,680 --> 00:03:52,840
So again I just want to use a very real ID so I take this idea right here.

57
00:03:52,840 --> 00:03:55,390
I'm not going to take the double quotes around it.

58
00:03:55,540 --> 00:03:59,940
I'm going to copy it and come back over up to the URL.

59
00:04:00,000 --> 00:04:01,490
I'm going to take off the one.

60
00:04:01,660 --> 00:04:09,730
So it's slash songs slash and then the idea of the song I want it try to find and and do again note

61
00:04:09,730 --> 00:04:13,120
that I've got no double quotes in here or anything like that.

62
00:04:13,600 --> 00:04:17,530
So now I visit this you l i get another console log.

63
00:04:17,890 --> 00:04:21,930
And in this one I can see ID of blah blah blah blah blah.

64
00:04:22,150 --> 00:04:25,080
So that's the idea of the song that we're trying to fetch.

65
00:04:25,680 --> 00:04:26,000
OK.

66
00:04:26,020 --> 00:04:28,080
So I feel pretty good about this year.

67
00:04:28,090 --> 00:04:34,360
I think though we've got a pretty clear idea of how the your L is mapping up to some data that is sitting

68
00:04:34,360 --> 00:04:35,560
inside the component.

69
00:04:35,560 --> 00:04:41,710
So again this is a real important link in the chain especially for the next thing that we're about to

70
00:04:41,710 --> 00:04:43,700
kind of stumble into.

71
00:04:44,380 --> 00:04:48,040
So I want to take the graph Cuil help for now.

72
00:04:48,340 --> 00:04:53,700
I want to take the query and I want to Sandwich them together with the song detail.

73
00:04:53,770 --> 00:04:54,780
So let's give that a shot.

74
00:04:54,850 --> 00:05:01,330
We've gone through this process many times but this time things might be just a little bit different.

75
00:05:01,960 --> 00:05:07,530
So going to graft you will not pass in the fetch some queery.

76
00:05:07,630 --> 00:05:11,630
And I've got my second set of parentheses for the song detail component.

77
00:05:11,630 --> 00:05:11,910
OK.

78
00:05:11,920 --> 00:05:12,910
So this is looking good right.

79
00:05:12,910 --> 00:05:16,930
Like totally the looks reasonable I'm happy with how this looks.

80
00:05:16,930 --> 00:05:20,290
It looks just like the queries that we've put together previously.

81
00:05:20,590 --> 00:05:28,240
There's just one little detail one little gotcha in here I want to flip back over to graphical real

82
00:05:28,240 --> 00:05:32,710
quick and take a look at the query that we had been working with.

83
00:05:32,710 --> 00:05:36,150
So this is the query right here that we're attempting to execute.

84
00:05:36,160 --> 00:05:42,160
Was there any part of this query where we had said that it needs some very special data coming into

85
00:05:42,160 --> 00:05:43,860
it like maybe.

86
00:05:43,990 --> 00:05:46,510
Oh I don't know an ID.

87
00:05:46,870 --> 00:05:53,520
Yeah we had said that when ever we ran this query an ID must be provided to it.

88
00:05:53,660 --> 00:05:57,210
We must stick an ID inside the tree.

89
00:05:57,460 --> 00:06:05,290
So do we have any reason for suspecting that re-act router is going to just magically take the ID from

90
00:06:05,290 --> 00:06:09,040
that Parama object and stick it into this query right here.

91
00:06:09,130 --> 00:06:10,480
No not really.

92
00:06:10,660 --> 00:06:17,670
So the idea that is in the URL will not get automatically or magically pushed down into the fetch song

93
00:06:17,820 --> 00:06:18,520
query right here.

94
00:06:18,520 --> 00:06:20,520
There is no magic whatsoever.

95
00:06:20,860 --> 00:06:28,100
If we want to run that query with the query variable ID we have to manually make sure that we telegraphed

96
00:06:28,220 --> 00:06:35,290
well that we expect it to take the idea out of the Eurail or our props Start programs object and run

97
00:06:35,290 --> 00:06:36,540
the query with that.

98
00:06:36,550 --> 00:06:38,350
So it's a very manual interface.

99
00:06:38,350 --> 00:06:41,970
There is nothing automatic happening there for us.

100
00:06:41,970 --> 00:06:43,930
So OK you know that sounds reasonable.

101
00:06:43,930 --> 00:06:47,810
We have to make sure that we get the ID over to the inquiry.

102
00:06:47,830 --> 00:06:50,020
There's just one last little problem.

103
00:06:50,020 --> 00:06:51,800
One last little problem.

104
00:06:52,420 --> 00:06:57,840
I want you to think back to the song create component that we've been working on a whole bunch inside

105
00:06:57,850 --> 00:06:58,680
of sun create.

106
00:06:58,720 --> 00:07:00,400
So here's my song great component.

107
00:07:00,700 --> 00:07:06,910
We had the mutation function and we had said that whenever we called mutation we usually want to pass

108
00:07:06,910 --> 00:07:11,320
along some query variables just like the idea that we're talking about right now.

109
00:07:11,530 --> 00:07:17,440
And we had said that we'd pass along the query variables by calling the mutation function and then passing

110
00:07:17,440 --> 00:07:19,940
in the variables object like so.

111
00:07:20,380 --> 00:07:28,330
So in the mutation world where we call this Propst up mutate there is a very clear point in time inside

112
00:07:28,330 --> 00:07:33,880
of our component where we could easily pass in the list of query variables that we want to run the mutation

113
00:07:33,880 --> 00:07:35,090
with.

114
00:07:35,110 --> 00:07:44,920
However however in song detail over here with a query as we've seen these queries are executed manually

115
00:07:45,190 --> 00:07:50,380
and there's no time inside of the component where we can intercept it and say like oh hold on.

116
00:07:50,380 --> 00:07:51,500
Don't make that query.

117
00:07:51,640 --> 00:07:55,180
Let me call it manually and pass along these query variables.

118
00:07:55,510 --> 00:08:01,960
So they view the order in which we call a mutation and pass along some query variables is very different

119
00:08:01,960 --> 00:08:06,750
than the way in which we call a query and pass along some query variables.

120
00:08:06,790 --> 00:08:13,440
Again the whole idea here of the whole problem is that queries are executed automatically for us biographic.

121
00:08:13,530 --> 00:08:18,310
Well but mutations are called manually by you and me.

122
00:08:18,370 --> 00:08:23,830
So with the mutation we've got a very clear location where we pass along these Querrey variables with

123
00:08:23,830 --> 00:08:24,580
equerry.

124
00:08:24,640 --> 00:08:29,210
We do not have a very clear location where we can PP-ASEL inquiry variables.

125
00:08:29,230 --> 00:08:30,900
So that's the big challenge here.

126
00:08:31,090 --> 00:08:37,150
The big challenge here is understanding how we take some query variables and stick them into this query.

127
00:08:37,180 --> 00:08:43,210
When it's made who I love talking a lot of talking.

128
00:08:43,230 --> 00:08:47,960
Fortunately of course the Apollo team has foreseen this as being an issue.

129
00:08:48,000 --> 00:08:48,960
They recognize that.

130
00:08:48,960 --> 00:08:49,430
OK.

131
00:08:49,590 --> 00:08:54,180
Yeah we understand that you probably want to make this query right here with some number of Querrey

132
00:08:54,180 --> 00:08:54,980
variables.

133
00:08:55,080 --> 00:09:00,960
So they have provided an interface for us to take some data from our component and run it with this

134
00:09:00,960 --> 00:09:02,250
query.

135
00:09:02,250 --> 00:09:06,600
So we're going to add in a little bit of code to make that happen and then we'll talk about exactly

136
00:09:06,600 --> 00:09:07,920
what's going on.

137
00:09:07,920 --> 00:09:10,210
So the next little bit just a little bit weird.

138
00:09:10,320 --> 00:09:13,930
We're going to do all the code for it and then we're going to talk about how it's working.

139
00:09:14,460 --> 00:09:19,980
So after fecche song I'm going to pass in a second argument of an object.

140
00:09:19,980 --> 00:09:24,070
I'm going to put a new line in here just to get myself a little bit of space to work with.

141
00:09:24,450 --> 00:09:33,050
And I'm going to define an options property the options property is going to take a prop's argument.

142
00:09:33,530 --> 00:09:35,880
And again we're going to talk about what's going on here.

143
00:09:36,080 --> 00:09:46,790
And I'm going to return a variable's object that has another object of ID and its value is going to

144
00:09:46,790 --> 00:09:48,380
come from props.

145
00:09:48,410 --> 00:09:51,640
Priam's Id like so.

146
00:09:52,600 --> 00:09:53,130
OK.

147
00:09:53,180 --> 00:09:56,320
So do triple check make sure you got the right code here.

148
00:09:56,430 --> 00:10:00,020
There are some pretty crazy syntax in here with a lot of curly braces.

149
00:10:00,080 --> 00:10:05,270
So you should see three curly braces closing on the right hand side and then also a fourth one to close

150
00:10:05,270 --> 00:10:06,620
off the overall object.

151
00:10:06,640 --> 00:10:08,640
So make sure youve got all the right stuff there.

152
00:10:10,450 --> 00:10:16,570
OK so let's talk about what's going on here and what this kind of props object here is I'm going to

153
00:10:16,570 --> 00:10:21,280
flip over to a diagram that's going to help us hopefully help us understand what's going on here a little

154
00:10:21,280 --> 00:10:22,260
bit better.

155
00:10:23,140 --> 00:10:23,940
OK.

156
00:10:24,560 --> 00:10:28,550
So this is a diagram of our current component hierarchy.

157
00:10:28,550 --> 00:10:35,030
We've got reactor at the top because react router is deciding what set of components to render for us.

158
00:10:35,250 --> 00:10:38,110
Re-act router looks at the u r l.

159
00:10:38,150 --> 00:10:39,120
It says OK.

160
00:10:39,140 --> 00:10:42,050
They're trying to look at the song detail component.

161
00:10:42,290 --> 00:10:49,030
It also parses the or L and pulls the ID out of it and passes that Id down into the earth.

162
00:10:49,040 --> 00:10:53,600
Scuse me it passes the idea down through the prop's object.

163
00:10:53,630 --> 00:10:59,450
Now you'll notice that inside of our component file when we have that export default statement we're

164
00:10:59,450 --> 00:11:07,760
not saying just export default song detail we're saying export default graft Well song detail.

165
00:11:07,760 --> 00:11:15,340
So in reality we are kind of rendering a component that is being then wrapped by that graphical helper.

166
00:11:15,410 --> 00:11:22,390
So the graph Cuil helper knows the set of props that are coming down to the song detail a component.

167
00:11:22,550 --> 00:11:28,760
It has the ability to intercept them and read some props that had been intended to go down to the song

168
00:11:28,760 --> 00:11:29,740
detail.

169
00:11:29,840 --> 00:11:34,560
So you might have had an expectation that the props went kind of like this.

170
00:11:34,700 --> 00:11:39,860
So you might have had an expectation that reactor out or put together all of its special props and then

171
00:11:39,860 --> 00:11:42,290
pass them directly to the song detail.

172
00:11:42,290 --> 00:11:44,400
And I'm saying that's not really the case.

173
00:11:44,420 --> 00:11:51,230
The props first go into that craft helper and then the graft helper passes them along to the song detail

174
00:11:51,230 --> 00:11:52,290
component.

175
00:11:52,310 --> 00:11:58,880
So all I'm trying to say here is that the graft helper is 100 percent aware of all the props that are

176
00:11:58,880 --> 00:12:04,760
going to your component and so that's what we're taking advantage of inside of this options object right

177
00:12:04,760 --> 00:12:05,740
here.

178
00:12:05,840 --> 00:12:11,300
We say Okay take the props that had been intended to go to the song detail.

179
00:12:11,300 --> 00:12:19,610
So this got props and props right here are 100 percent equal 100 percent equals is the exact same object

180
00:12:20,630 --> 00:12:26,600
then whatever object we return from this function right here will be provided to the query when its

181
00:12:26,600 --> 00:12:27,180
made.

182
00:12:27,350 --> 00:12:34,010
So we're saying all right I want to provide some queery variables to the query so we form up a variable's

183
00:12:34,010 --> 00:12:39,160
object and say yeah you probably need to know about an ID inheres that ID.

184
00:12:39,160 --> 00:12:41,830
And we're taking the ID from props.

185
00:12:41,960 --> 00:12:44,730
Harams dot ID.

186
00:12:44,850 --> 00:12:45,520
All right.

187
00:12:45,530 --> 00:12:47,230
Another breather.

188
00:12:47,630 --> 00:12:49,970
Yes there is a lot of stuff going on here.

189
00:12:49,970 --> 00:12:55,490
It is pretty crazy but hopefully its at least somewhat evident how the data is flowing through this

190
00:12:55,490 --> 00:12:56,690
little bit of code.

191
00:12:56,720 --> 00:13:03,350
Again the real important thing to understand is that the prop's argument right here is this not props

192
00:13:03,410 --> 00:13:09,830
inside the inside the components self is an identical object graph Cuil is intercepting that prop's

193
00:13:09,830 --> 00:13:17,830
object and its allowing you to work with it before it gets passed on to the actual component class.

194
00:13:17,860 --> 00:13:18,640
All right.

195
00:13:18,710 --> 00:13:20,000
This is looking pretty good.

196
00:13:20,000 --> 00:13:23,910
I want to run this inside the browser make sure everything is working the way we expect.

197
00:13:24,080 --> 00:13:25,990
And then we'll go from there.

198
00:13:26,300 --> 00:13:32,240
So going to flip back to the browser in my application at this point it is absolutely critical that

199
00:13:32,240 --> 00:13:37,550
you make sure that you have a valid and legitimate ID inside your you are l right now.

200
00:13:37,700 --> 00:13:44,540
So you have to make sure that you ran graph Q Well are extremely graphical and got an ID for a valid

201
00:13:44,630 --> 00:13:47,090
record that's sitting inside of your database.

202
00:13:47,090 --> 00:13:52,460
Otherwise this query is going to fail because the back end is not going to find a song with the given

203
00:13:52,460 --> 00:13:54,100
ID.

204
00:13:54,110 --> 00:14:00,040
So let's run this look at the council log and see what happens.

205
00:14:00,200 --> 00:14:02,960
We get two council log statements in here which is good.

206
00:14:03,110 --> 00:14:09,470
We get to cancel logs because the component renders one time while the query is still running and after

207
00:14:09,470 --> 00:14:10,650
the query has been resolved.

208
00:14:10,670 --> 00:14:15,550
It gets rendered a second time and the result of the query is provided on the prop's object.

209
00:14:15,770 --> 00:14:21,650
So we'll look at the second console log here and then open up the data object and inside here you'll

210
00:14:21,650 --> 00:14:23,090
see a song property.

211
00:14:23,420 --> 00:14:24,890
And there we go.

212
00:14:24,890 --> 00:14:30,010
There is my song Id of 5 8 9 ending into 8 to 100.

213
00:14:30,050 --> 00:14:30,740
Scuse me.

214
00:14:30,740 --> 00:14:32,480
So 5 8 9 and 200.

215
00:14:32,480 --> 00:14:33,320
That looks good.

216
00:14:33,440 --> 00:14:37,360
And I've got my title of coffee couple perfect.

217
00:14:37,730 --> 00:14:40,430
So this is working just the way I would expect it to.

218
00:14:41,970 --> 00:14:46,380
Inclosing on this topic the last thing I want to mention to you is that this pattern right here that

219
00:14:46,380 --> 00:14:50,480
you're seeing is a 100 percent reproducible to your own projects.

220
00:14:50,640 --> 00:14:56,340
And I really expect you to use this exact same pattern right here whenever you want to make a query

221
00:14:56,340 --> 00:15:01,800
for a particular record that is in assume you make a query that is trying to fetch a very particular

222
00:15:01,800 --> 00:15:04,650
record using some information from the URL.

223
00:15:04,650 --> 00:15:10,830
So this is something that definitely I expect you know we'll be able to copy paste to your um project

224
00:15:10,830 --> 00:15:11,800
in the future.

225
00:15:11,850 --> 00:15:13,200
So if it looks crazy.

226
00:15:13,290 --> 00:15:18,270
Just remember back to this phone right here and you'll have a really solid reference to look at in the

227
00:15:18,270 --> 00:15:20,460
future OK.

228
00:15:20,640 --> 00:15:22,590
The section has definitely been long enough.

229
00:15:22,710 --> 00:15:29,400
So let's take a quick break and then we'll come back and make use of our new song inside of this component

230
00:15:29,400 --> 00:15:32,520
right here and we'll continue working on this.

231
00:15:32,520 --> 00:15:34,060
Sosia in just a second.

