1
00:00:00,490 --> 00:00:05,320
In the last section we worked on the header component inside of our application and I got a little bit

2
00:00:05,320 --> 00:00:08,740
of an error message about the re-act router library not being found.

3
00:00:08,800 --> 00:00:11,790
That was a little bit of configuration error that was on my side.

4
00:00:11,860 --> 00:00:15,070
I fixed it up so you probably didn't have that error at all.

5
00:00:15,070 --> 00:00:17,380
Again it was just a small mistake that I made.

6
00:00:17,680 --> 00:00:22,780
So we've now got the text headers showing on the screen which means our header component is successfully

7
00:00:22,780 --> 00:00:26,410
being displayed to our users which is exactly what we want to have.

8
00:00:26,410 --> 00:00:28,600
So that's definitely good.

9
00:00:28,600 --> 00:00:33,310
Now that we've got the header on the screen we need to start thinking about what content it needs to

10
00:00:33,310 --> 00:00:34,170
show.

11
00:00:34,480 --> 00:00:41,130
So let's look at a diagram that's going to help us figure out exactly how to deal with this Hetter.

12
00:00:41,270 --> 00:00:47,940
OK so when our application first loads up on the page and the user sees that header component on the

13
00:00:47,940 --> 00:00:53,490
screen we want to make sure that it shows the correct buttons inside the head or depending on whether

14
00:00:53,490 --> 00:00:57,060
or not the user is currently authenticated with our application.

15
00:00:57,060 --> 00:01:03,630
So when our Hetter first loads up I'm going to suggest that maybe we make a query to get our current

16
00:01:03,690 --> 00:01:05,400
authentication state.

17
00:01:05,730 --> 00:01:12,150
So remember that we just added in a field to our route query type to ask whether or not our user is

18
00:01:12,150 --> 00:01:15,800
currently signed in or to get the currently signed in user.

19
00:01:16,170 --> 00:01:23,400
So if we make a query inside of the header and we ask for that piece of data from our server we can

20
00:01:23,400 --> 00:01:29,620
say that if the user is currently signed in we'll show a set of buttons that allow the user to log out.

21
00:01:29,670 --> 00:01:34,860
So will probably be just a single button that says log out and if the user clicks it we'll call the

22
00:01:34,860 --> 00:01:36,100
log out mutation.

23
00:01:36,100 --> 00:01:38,800
So that's definitely straightforward enough.

24
00:01:38,880 --> 00:01:45,540
Now if the user is not currently authenticated so if they are not yet signed into our application we

25
00:01:45,540 --> 00:01:51,080
can show a set of log unbuttons instead and those logging buttons will be a button that say you know

26
00:01:51,090 --> 00:01:53,040
maybe log in and log out.

27
00:01:53,040 --> 00:01:58,290
So it'll allow the user to click on one of those and then go to the appropriate forum to actually sign

28
00:01:58,290 --> 00:02:01,390
in or sign up to our application.

29
00:02:01,410 --> 00:02:04,630
So I think this is a good plan to go forward with.

30
00:02:04,830 --> 00:02:10,470
First write out our query inside of graphical and then we'll move the query over to our application

31
00:02:10,800 --> 00:02:15,210
and then make sure that we call the query from inside of our head or component.

32
00:02:15,210 --> 00:02:16,220
So let's get to it.

33
00:02:17,170 --> 00:02:20,720
First I'm going to switch on over to graphical.

34
00:02:20,950 --> 00:02:27,370
Now one of the last queries that we wrote was actually to test the current user query on the root the

35
00:02:27,370 --> 00:02:28,620
root query type.

36
00:02:28,630 --> 00:02:30,940
So we've kind of already got this thing up here.

37
00:02:31,000 --> 00:02:36,550
If you deleted this in for any reason then you can certainly rewrite the query out very quickly here.

38
00:02:36,700 --> 00:02:40,430
We are asking the root query type to find the current user.

39
00:02:40,520 --> 00:02:44,810
We're asking to get back the current email an ID associated with them.

40
00:02:45,010 --> 00:02:51,320
So when I add on the ID on there as well you I refresh it just to make sure that we get the idea as

41
00:02:51,320 --> 00:02:52,000
well.

42
00:02:55,050 --> 00:02:55,920
Cool.

43
00:02:56,050 --> 00:03:02,040
So now we can ask for the currently authenticated user and we get back the ID and the e-mail of that

44
00:03:02,040 --> 00:03:04,400
user just as we would expect.

45
00:03:04,450 --> 00:03:09,900
Do remember that if you see a user of Noal over here that means you're not currently authenticated with

46
00:03:09,900 --> 00:03:16,350
our application which means you can run the loggin mutation to authenticate with the application and

47
00:03:16,350 --> 00:03:18,320
then you can rerun this query right here.

48
00:03:18,470 --> 00:03:23,420
To get back to the ID and the email of your currently authenticated user.

49
00:03:23,630 --> 00:03:29,550
OK so we're going to take this query over here and we're going to move it over to our application.

50
00:03:29,560 --> 00:03:31,220
So I just copied it.

51
00:03:31,390 --> 00:03:36,310
We're going to move it over to our application inside of a new file that's going to house all of our

52
00:03:36,310 --> 00:03:39,920
different queries in my client directory.

53
00:03:40,020 --> 00:03:44,150
I'm going to make a new folder first and I'm going to call it queries.

54
00:03:44,500 --> 00:03:49,900
So I don't really expect to have many queries associated with this application but definitely I want

55
00:03:49,900 --> 00:03:55,330
to wherever possible try to isolate them into a single file just in case we need to ask in multiple

56
00:03:55,330 --> 00:03:59,200
locations for the currently authenticated user.

57
00:03:59,230 --> 00:04:04,760
So inside of here I'm going to make a new file called current user.

58
00:04:04,860 --> 00:04:05,760
Yes.

59
00:04:06,190 --> 00:04:13,130
So this current user query will be responsible for returning the current user of our application.

60
00:04:13,310 --> 00:04:17,050
We've written queries inside of individual files several times before.

61
00:04:17,100 --> 00:04:27,510
So remember at the very top we'll import the GTL helper from graft UL tag and then we'll export default

62
00:04:27,810 --> 00:04:29,290
the actual query.

63
00:04:29,850 --> 00:04:32,070
And again we've done this several times.

64
00:04:32,100 --> 00:04:34,070
We place our GQ helper.

65
00:04:34,230 --> 00:04:38,670
We place our template string and then we paste in our query like so

66
00:04:42,400 --> 00:04:42,840
OK.

67
00:04:42,870 --> 00:04:44,080
That's looking pretty good.

68
00:04:44,220 --> 00:04:49,890
We can now import this query into our header component and then instantly run the query whenever the

69
00:04:49,890 --> 00:04:52,070
header is rendered onto the screen.

70
00:04:52,440 --> 00:04:56,340
So we're going to flip on over to my header at the top.

71
00:04:56,340 --> 00:05:01,980
We're going to import both the query that we just wrote and the graph Cuil helper from the re-act Apollo

72
00:05:01,980 --> 00:05:03,180
library.

73
00:05:03,810 --> 00:05:05,660
So we'll first import graft.

74
00:05:05,750 --> 00:05:13,690
Well from re-act Apollo remember that this function right here is what allows us to take a query into

75
00:05:13,700 --> 00:05:21,270
component and sandwich the two of them together and then we'll also import our current user query we

76
00:05:21,270 --> 00:05:27,720
can just call it queery Instead let's just keep it simple and call it query from up one directory in

77
00:05:27,780 --> 00:05:31,350
the queries folder and get the current user query.

78
00:05:35,020 --> 00:05:35,410
All right.

79
00:05:35,440 --> 00:05:41,490
Next we've done this next several times before to a lot of repeat code in here will place the graph

80
00:05:41,500 --> 00:05:47,440
Q Will help or at the bottom will pass it the query that we want to execute and then wrap the component

81
00:05:47,470 --> 00:05:50,270
in a second set of parentheses after it.

82
00:05:51,590 --> 00:05:52,230
OK.

83
00:05:52,760 --> 00:05:56,020
So again our job now is to run this query.

84
00:05:56,150 --> 00:06:00,980
Look at the query and then decide whether or not we want to show a set of buttons that allow the user

85
00:06:00,980 --> 00:06:07,690
to log out or allow them to navigate to a form to log in or sign up to our application.

86
00:06:08,090 --> 00:06:13,520
So I'm going to suggest that maybe we can still log the results of the query and then we look at the

87
00:06:13,520 --> 00:06:19,550
query itself and figure out exactly what properties we can refer to to decide what content we want to

88
00:06:19,550 --> 00:06:21,030
render inside the header.

89
00:06:21,230 --> 00:06:27,800
So essentially whether or not we want to show the button to log out or the two buttons to sign in.

90
00:06:28,340 --> 00:06:32,180
So I'm going to place a console log in here and we're just going to log out the results of the query

91
00:06:32,450 --> 00:06:35,440
we're going to look at it and decide what to do.

92
00:06:35,450 --> 00:06:41,510
Remember that the result of the query always exists on this stock prop stock data OK.

93
00:06:41,800 --> 00:06:43,080
So this is looking pretty good.

94
00:06:43,090 --> 00:06:46,830
I think that we're just about ready to give this a test.

95
00:06:46,840 --> 00:06:55,000
I'm going to flip on over to my application I can refresh the page and I get my two queries consuls

96
00:06:55,140 --> 00:06:55,530
out here.

97
00:06:55,530 --> 00:06:57,420
Perfect to just what I want.

98
00:06:57,420 --> 00:07:02,760
Remember that the first result right here is from when before the query is actually completed.

99
00:07:02,760 --> 00:07:07,980
So that is the first time that component is rendered the Kapono is rendered instantly as the query is

100
00:07:07,980 --> 00:07:11,610
in progress and then the component renders another time.

101
00:07:11,610 --> 00:07:15,230
Once the component or some new ones the query has been completed.

102
00:07:15,290 --> 00:07:18,520
So let's look at the data on these things and see what we have available.

103
00:07:19,810 --> 00:07:20,820
Okay.

104
00:07:21,560 --> 00:07:27,980
So it looks like in the case that the user or the query has not been completed loading is true and we've

105
00:07:28,070 --> 00:07:30,750
seen this property several times before.

106
00:07:30,770 --> 00:07:37,610
Chances are that when loading is true we have not yet fetched any details about the user whatsoever.

107
00:07:37,610 --> 00:07:44,360
So I do not yet know whether or not I want to show some content to the user to say oh yeah you need

108
00:07:44,360 --> 00:07:46,800
to sign in or you are signed in.

109
00:07:46,970 --> 00:07:50,100
When loading is true I still don't know what to render.

110
00:07:50,180 --> 00:07:53,300
So I think that we should probably have some catch inside of our component.

111
00:07:53,300 --> 00:07:59,630
To say that if the query is still in progress I probably don't want to show any buttons whatsoever because

112
00:07:59,630 --> 00:08:07,650
I don't want to assume that the user is or is not logged out now and the response or the second counts

113
00:08:07,840 --> 00:08:11,190
that we get here we have a loading of false.

114
00:08:11,190 --> 00:08:17,120
So that definitely makes sense the query is now completed and our user field is no which means our user

115
00:08:17,120 --> 00:08:19,730
is not currently authenticated.

116
00:08:19,730 --> 00:08:24,440
Now if you're looking at this and you're trying to say you're trying to figure out Well Stephen didn't

117
00:08:24,440 --> 00:08:28,940
we just make a query which said that we are authenticated aren't we currently authenticated with the

118
00:08:28,940 --> 00:08:29,450
server.

119
00:08:29,450 --> 00:08:31,580
Shouldn't user be populated right here.

120
00:08:31,820 --> 00:08:34,780
Well the answer is yeah well we'll get to that in just a second.

121
00:08:34,970 --> 00:08:36,680
Bear with me for a moment.

122
00:08:37,190 --> 00:08:43,220
The last thing I want to say about this is just after loading flips over to false we will be able to

123
00:08:43,220 --> 00:08:45,260
look at this user property right here.

124
00:08:45,380 --> 00:08:46,890
And if user is not.

125
00:08:46,890 --> 00:08:47,300
No.

126
00:08:47,390 --> 00:08:53,090
So if user is an object that has an ID and an e-mail that means that we should probably show the log

127
00:08:53,090 --> 00:08:58,730
out button but in the case that user is no well then we should probably show the two buttons that allow

128
00:08:58,730 --> 00:09:02,820
the user to navigate over to the sign up or sign in forms.

129
00:09:03,200 --> 00:09:03,560
OK.

130
00:09:03,590 --> 00:09:05,980
So that's the overall plan here.

131
00:09:06,020 --> 00:09:10,970
We want to look at the loading flag first and figure out whether or not we should show any buttons.

132
00:09:11,210 --> 00:09:16,460
And then once loading is false we can then look at the user property and decide what we want to actually

133
00:09:16,460 --> 00:09:17,370
do.

134
00:09:17,940 --> 00:09:18,410
OK.

135
00:09:18,590 --> 00:09:23,930
Now I want to go back to something that you kind of interjected in there where I'd said that we're looking

136
00:09:23,930 --> 00:09:26,680
at this user property and it's set to No.

137
00:09:26,840 --> 00:09:32,310
But we had just ran a query over here which seems to think that we are currently authenticated.

138
00:09:32,360 --> 00:09:38,820
So remember that you'll only see an ID and email right here if you have already signed in to the application.

139
00:09:38,840 --> 00:09:40,760
So if you are not currently signed in.

140
00:09:40,760 --> 00:09:46,850
Be sure to run the log in mutation and then you'll be able to ask for the current user and see the idea

141
00:09:46,910 --> 00:09:49,920
that e-mail that you're currently signed in has anyways.

142
00:09:50,060 --> 00:09:54,590
What I am trying to indicate here are what I'm trying to show to you is that when we run this query

143
00:09:54,590 --> 00:09:59,750
to get the current user inside of graphical everything around authentication functions the way that

144
00:09:59,750 --> 00:10:03,570
we expect we are currently signed into the application.

145
00:10:03,650 --> 00:10:10,400
However when we run the query inside of our application it appears that we are not correctly fetching

146
00:10:10,400 --> 00:10:11,660
the current user.

147
00:10:11,720 --> 00:10:17,120
So it looks like between graphical and our application there is a little bit of a disagreement on whether

148
00:10:17,120 --> 00:10:19,310
or not we're currently authenticated.

149
00:10:19,310 --> 00:10:24,500
So let's take a pause from our head or in the next section and let's figure out what's going on here

150
00:10:24,530 --> 00:10:29,620
and let's figure out why our current user is not correctly being fetched inside of our application.

