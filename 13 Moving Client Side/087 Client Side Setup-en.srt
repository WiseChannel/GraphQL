1
00:00:00,680 --> 00:00:05,340
We made some great progress on the server side of our application as we now have the ability to sign

2
00:00:05,340 --> 00:00:08,080
up a user logged them out and sign them back in.

3
00:00:08,220 --> 00:00:13,140
And also the ability to determine whether or not a user is currently authenticated which means we can

4
00:00:13,140 --> 00:00:18,660
now start thinking about the client side of our application the client side of our application is going

5
00:00:18,660 --> 00:00:24,270
to be a re-act application that is backed by re-act router for handling navigation to some of the different

6
00:00:24,270 --> 00:00:25,310
pages.

7
00:00:25,620 --> 00:00:29,310
Let's take a look at our mockup again and start planning out some of the different components of the

8
00:00:29,310 --> 00:00:32,880
probably need inside of this application.

9
00:00:32,880 --> 00:00:37,680
So I'm going to suggest that we probably have a head or component of sorts that will exist at the very

10
00:00:37,680 --> 00:00:43,870
top of our application the head or component will either show two buttons that say sign up and sign

11
00:00:43,870 --> 00:00:44,510
in.

12
00:00:44,880 --> 00:00:51,090
If the user is not currently signed in and once the user is authenticated we'll instead flip it over

13
00:00:51,090 --> 00:00:55,260
to just have a single button of sign out over here.

14
00:00:55,260 --> 00:01:01,740
So the state or the display variable or the display property of Hetter is going to change based on the

15
00:01:01,740 --> 00:01:09,480
user's authentication state for the external landing page that a user will see if they are not currently

16
00:01:09,480 --> 00:01:10,570
authenticated.

17
00:01:10,620 --> 00:01:16,290
We could probably call that landing or main or something like that something to just indicate this is

18
00:01:16,290 --> 00:01:21,520
the component that the user is going to see whenever they land on the welcome page or on our route route

19
00:01:21,540 --> 00:01:29,460
when they are not currently authenticated then to sign up a user and sign one in these two forms look

20
00:01:29,520 --> 00:01:31,600
just about identical.

21
00:01:31,770 --> 00:01:34,200
One is collecting e-mail and password.

22
00:01:34,200 --> 00:01:38,380
And the other is lo and behold also collecting the email and password.

23
00:01:38,670 --> 00:01:43,680
I've currently I'm kind of thinking right now maybe they'll be separate forms but maybe we can think

24
00:01:43,680 --> 00:01:49,980
of some way to combine them together in just a single form since they both really make use of the same

25
00:01:49,980 --> 00:01:52,030
different fields inside of here.

26
00:01:52,230 --> 00:01:57,870
The only big difference between the two of them is the mutation that each one calls the sign up form

27
00:01:57,950 --> 00:02:03,060
will call the sign up mutation and the log in form needs to call the log in mutation.

28
00:02:03,270 --> 00:02:08,370
So maybe we can think of some way to do a little bit of code reuse in there without having to rewrite

29
00:02:08,370 --> 00:02:10,100
the entire form twice.

30
00:02:11,630 --> 00:02:17,420
Finally when a user is successfully signed in and we want to show them some page that says hey you're

31
00:02:17,420 --> 00:02:23,030
now currently signed into our application we can probably call that something like dashboard or welcome

32
00:02:23,030 --> 00:02:25,760
page or logged in page.

33
00:02:25,760 --> 00:02:29,630
Just something to indicate to the user Hey you're currently signed into our application.

34
00:02:29,630 --> 00:02:31,320
Congratulations.

35
00:02:31,820 --> 00:02:34,310
So that's our plan for all the different components.

36
00:02:34,340 --> 00:02:39,710
I think we can probably go ahead and get started inside of our application on the client side by wiring

37
00:02:39,710 --> 00:02:47,060
up some of the Apollo boilerplate so I can open up my code editor and we'll open up our client directory

38
00:02:47,210 --> 00:02:50,930
and then find the index file.

39
00:02:50,960 --> 00:02:54,950
So this is where we're going to do a lot of the initial setup of our application and we have gone through

40
00:02:54,950 --> 00:02:56,700
this one time already.

41
00:02:56,750 --> 00:02:59,830
Remember that inside this index G-S File.

42
00:02:59,840 --> 00:03:04,610
Our intent is to both start up re-act router and define all the different routes that we're going to

43
00:03:04,610 --> 00:03:11,330
have available and we'll also start up our Appollo client and wired up to our re-act application through

44
00:03:11,330 --> 00:03:13,770
the use of the Apollo provider as well.

45
00:03:14,760 --> 00:03:19,110
So I think it makes sense to first start off with the Apollo side of our application.

46
00:03:19,260 --> 00:03:25,560
So let's let's require in or let's import some of the Apollo helper's and then add them to our component

47
00:03:25,560 --> 00:03:26,550
here.

48
00:03:27,270 --> 00:03:36,660
So we'll start off by importing the Apollo clients from the Apollo client library

49
00:03:39,380 --> 00:03:49,680
and we'll also import the Apollo provider from react Apollo as well do take special note of the presence

50
00:03:49,680 --> 00:03:57,120
of the curly braces on here the Apollo client library expert exports the Apollo client as the default

51
00:03:57,180 --> 00:03:57,990
ex-porn.

52
00:03:58,260 --> 00:04:04,110
Whereas re-act Apollo exports several different properties one of which is the Apollo provider which

53
00:04:04,110 --> 00:04:08,900
is why we're using the curly braces here but not on the Apollo client above it.

54
00:04:11,210 --> 00:04:18,620
Now we can make use of the Apollo client library to make our local Apollo client so we'll say conc client

55
00:04:18,860 --> 00:04:26,990
is new Apollo client and I am going to pass it that options object because I do expect that we're going

56
00:04:27,000 --> 00:04:30,570
to have to add in that data ID from object helper.

57
00:04:30,900 --> 00:04:35,430
Remember we spoke about that data idea from object function that gets placed inside of here.

58
00:04:35,460 --> 00:04:41,970
Its purpose is to identify every record that comes back from the server so that Appollo is able to say

59
00:04:42,190 --> 00:04:43,370
ah I just got back.

60
00:04:43,380 --> 00:04:44,750
Record ABC.

61
00:04:44,850 --> 00:04:47,250
I just got back record 1 2 3.

62
00:04:47,310 --> 00:04:52,440
So rather than refurbishing our data for every single query that is issued Apollo will have the ability

63
00:04:52,440 --> 00:04:57,360
to identify the information that its already been pulled down from the server and store it inside of

64
00:04:57,360 --> 00:04:59,570
some local cache.

65
00:04:59,670 --> 00:05:00,200
So will I.

66
00:05:00,330 --> 00:05:05,150
We will define the data ID from object function.

67
00:05:05,580 --> 00:05:11,710
So every record that we fetch from our back end will be ran through this function right here and we

68
00:05:11,710 --> 00:05:15,630
identify it by returning the records ID.

69
00:05:15,630 --> 00:05:20,160
Now one thing I do want to point out is that the only type that were turning from our back and right

70
00:05:20,160 --> 00:05:26,790
now is the user type and we currently have not yet defined the ID on that type just yet we have not

71
00:05:26,790 --> 00:05:28,470
yet defined the ID field.

72
00:05:28,680 --> 00:05:31,160
So we have to make sure that we take care of that as well.

73
00:05:32,230 --> 00:05:38,200
So if we open up our server directory find our schema file see me in the schema folder and find the

74
00:05:38,200 --> 00:05:39,490
types folder.

75
00:05:39,500 --> 00:05:46,990
Find my user typed file and then inside of here again we have not yet defined the ID field on the user

76
00:05:46,990 --> 00:05:47,840
type.

77
00:05:48,130 --> 00:05:50,780
So ill defined the ID field as well.

78
00:05:50,920 --> 00:05:57,360
So type is graph Cuil id going to make sure that I get my Khama on there.

79
00:05:57,490 --> 00:06:01,890
I'm not going to triple check my capitalization on here as well and make sure that I've got capitalized

80
00:06:01,900 --> 00:06:08,450
capital D and will also make sure to restructure that off of our graph Tool object as well.

81
00:06:08,610 --> 00:06:10,960
It's a graphic tool Id like so.

82
00:06:11,800 --> 00:06:12,310
OK.

83
00:06:12,640 --> 00:06:15,570
So remember that data ID from object.

84
00:06:15,580 --> 00:06:22,090
The assumption here is that every single record that comes back from our back end will have an id property

85
00:06:22,090 --> 00:06:23,390
defined on it.

86
00:06:23,410 --> 00:06:26,190
So that's why we just added that ID field to the user type.

87
00:06:26,230 --> 00:06:32,050
We need to make sure that whenever we ask for user from the back end we have to specify that we want

88
00:06:32,050 --> 00:06:33,550
the ID field as well.

89
00:06:33,640 --> 00:06:39,010
And that's just what allows the Apollo client to uniquely identify every record that we fetch.

90
00:06:41,190 --> 00:06:46,950
Okay the last thing that I want to do inside of you really quick is to set up or Appollo provider.

91
00:06:47,020 --> 00:06:51,900
So remember the Apollo client is just the piece of technology that interacts with our back end.

92
00:06:52,110 --> 00:06:55,820
It has no idea how to work with the re-act library.

93
00:06:55,860 --> 00:07:01,680
It's up to the Apollo provider to provide that glue layer the tween the Apollo client which fetches

94
00:07:01,680 --> 00:07:06,250
all the data and our re-act application which displays all the data.

95
00:07:06,860 --> 00:07:16,680
So rather than showing a div in here by itself we will add in the Apollo provider we'll pass it to the

96
00:07:16,680 --> 00:07:23,190
client that we just created and then we'll make sure that we wrap the entire Appollo provider with it

97
00:07:23,700 --> 00:07:29,710
excuse me the entire div with the Apollo provider like so okay.

98
00:07:29,750 --> 00:07:31,510
This is looking pretty good here.

99
00:07:31,550 --> 00:07:35,570
I think we could probably give us a test out inside of our browser and just make sure that we still

100
00:07:35,570 --> 00:07:38,800
see the text Auth. starter on the screen.

101
00:07:39,170 --> 00:07:42,840
First make sure that my server is still running without any errors.

102
00:07:42,890 --> 00:07:45,110
So yup looks like I don't have any errors here.

103
00:07:45,110 --> 00:07:51,470
Looks like the project still being built successfully sold change back over to my browser and then navigate

104
00:07:51,470 --> 00:07:55,700
to local host 4000 and it looks good.

105
00:07:55,700 --> 00:08:00,600
We still have all starter appearing on the screen and I appear to not have any errors.

106
00:08:00,860 --> 00:08:05,280
So looks like we've got this early start of our application put together correctly.

107
00:08:05,300 --> 00:08:10,880
Let's continue with the next section and start working on the initial setup of re-act router as well.

