1
00:00:00,640 --> 00:00:04,990
We're still in the process of handling errors inside of our log in form.

2
00:00:05,140 --> 00:00:09,240
Our goal right now is to take this list of errors that we get back from graft.

3
00:00:09,290 --> 00:00:14,510
Well make sure that we update some component level state with the list of errors.

4
00:00:14,890 --> 00:00:20,110
Then take that list of errors pass them on down into the art form and then make sure that they appear

5
00:00:20,110 --> 00:00:25,450
on the screen in some fashion and the user can see the list of errors and say oh OK I guess I need to

6
00:00:25,450 --> 00:00:28,420
fix my e-mail or my password.

7
00:00:28,600 --> 00:00:29,750
So let's get started.

8
00:00:29,800 --> 00:00:38,480
Will first define our constructor inside of this component to initialize our component level state.

9
00:00:39,160 --> 00:00:45,740
So I'll define this dot state which will be errors and I'm going to default it to be an empty array.

10
00:00:46,120 --> 00:00:48,400
So notice some defaulting to be an empty array here.

11
00:00:48,400 --> 00:00:49,800
I'm not defaulting to me.

12
00:00:49,810 --> 00:00:50,260
No.

13
00:00:50,260 --> 00:00:51,560
Or undefined.

14
00:00:51,790 --> 00:00:57,970
And the reason for that is that when I pass it down into off form I always want to be able to just map

15
00:00:58,000 --> 00:01:03,400
over the list of errors and not worry about errors being undefined or no.

16
00:01:03,670 --> 00:01:10,420
Remember if I call map or map on Knoller undefined I'm immediately going to get a big error message.

17
00:01:10,480 --> 00:01:12,780
And so by making sure I defaulted to be an array.

18
00:01:12,880 --> 00:01:19,150
I'm just saving myself a little bit of trouble inside of the auth form component of having to look specifically

19
00:01:19,180 --> 00:01:24,660
at the Ayres object and decide oh well is this thing an array that I can map over.

20
00:01:24,660 --> 00:01:26,270
Or is it undefined or unknown.

21
00:01:26,320 --> 00:01:28,680
So I'm just writing my code in such a way right.

22
00:01:28,690 --> 00:01:33,510
I have to place a couple little bit more checks of logic inside of there.

23
00:01:34,240 --> 00:01:34,550
OK.

24
00:01:34,570 --> 00:01:41,800
Now that we've initialized our airspace of state we can update our catch statement in here to update

25
00:01:41,800 --> 00:01:46,720
our component level state with the new heir's object or heir's array that was defined.

26
00:01:46,720 --> 00:01:54,790
So we'll now say this Dotts set state and we'll say update the air's piece of state again we've done

27
00:01:54,790 --> 00:01:57,670
as many times making use of E-6 sharpeners.

28
00:01:57,670 --> 00:02:00,570
So I only have to put the name of the variable here.

29
00:02:02,040 --> 00:02:09,070
So now presumably by this Dotts state DOT is variable is always going to be an array that is either

30
00:02:09,100 --> 00:02:12,160
empty or contains a list of errors.

31
00:02:12,700 --> 00:02:17,590
So we can now move on down to the art form we're going to pass the list of errors down into this thing

32
00:02:18,430 --> 00:02:20,710
as a product that all just call errors.

33
00:02:20,860 --> 00:02:23,770
It's going to come from this state of errors.

34
00:02:24,310 --> 00:02:25,830
And I'm kind of running out of space here.

35
00:02:25,840 --> 00:02:28,570
I'm going to a new line is this props list.

36
00:02:28,570 --> 00:02:33,970
You probably don't have to if you're not too far scroll down just to make sure things are legible for

37
00:02:33,970 --> 00:02:38,650
you to read my code on the screen are going to do a little bit of new lighning look.

38
00:02:38,650 --> 00:02:43,220
So now we can move over to off form and map over the list of errors.

39
00:02:43,240 --> 00:02:47,280
And for every error will just make sure that it appears on the screen.

40
00:02:47,560 --> 00:02:50,550
So I'm going to change over to my office form.

41
00:02:51,020 --> 00:02:54,540
I'm going to find my form component inside the render method.

42
00:02:54,850 --> 00:03:00,610
And I think that a very reasonable place to put this list of error messages is going to be right above

43
00:03:00,610 --> 00:03:02,710
the button that the user should be pressing.

44
00:03:02,900 --> 00:03:09,280
So right somewhere in here that allow the user to understand that the list of errors is a part of the

45
00:03:09,280 --> 00:03:10,420
form.

46
00:03:10,450 --> 00:03:15,370
Again one other approach that we could possibly take here if we didn't really care about putting the

47
00:03:15,370 --> 00:03:20,170
list of error messages right above the button we could have just as well rendered the list of errors

48
00:03:20,230 --> 00:03:22,540
inside of the log informant self.

49
00:03:22,540 --> 00:03:28,150
So if I wanted to kind of just not have to worry quite so much about passing this list of props around

50
00:03:28,240 --> 00:03:32,440
I could have also place the error list right here instead.

51
00:03:32,440 --> 00:03:36,610
Again it's something that's really up to you but personally I think that it makes a lot of sense to

52
00:03:37,300 --> 00:03:42,530
display the list of errors within the actual form component.

53
00:03:42,690 --> 00:03:47,620
So inside of the art form we will map over our list of errors.

54
00:03:47,920 --> 00:03:53,640
And for every error we have we'll just pump out one div and place the error message inside of it.

55
00:03:54,010 --> 00:03:58,910
So I don't think we need a helper div here are seeing that helper method or anything like that.

56
00:03:58,930 --> 00:04:09,720
I think we can we can just look at this dot props dot heir's and then for every air we return a div

57
00:04:11,220 --> 00:04:17,370
that contains the error text and then do make sure that because we are producing a list of elements

58
00:04:17,370 --> 00:04:23,880
here we do have to even though this is a very small and very confined list of errors it is still nonetheless

59
00:04:23,940 --> 00:04:24,650
a list.

60
00:04:24,780 --> 00:04:28,230
So we do have to define the key property on each of these.

61
00:04:28,410 --> 00:04:30,770
We can use the error message itself as a key.

62
00:04:30,780 --> 00:04:35,460
I think that's reasonable unique and probably won't be duplicated throughout the list of errors.

63
00:04:35,570 --> 00:04:42,510
And in fact even if the key is duplicated if we use the error text here as the as a key it'll make sure

64
00:04:42,510 --> 00:04:49,550
that kind of haywire or a kind of short circuit reactant only showing a single div for any area if there's

65
00:04:49,560 --> 00:04:50,760
any duplicates.

66
00:04:51,930 --> 00:04:56,880
Now last thing I want to do is make sure that we color this list of errors to be read in some fashion

67
00:04:57,180 --> 00:05:01,690
so the user understands that hey this is a list of errors you need to take care of them.

68
00:05:01,770 --> 00:05:07,980
So I'm going to wrap this entire map statement with the div that has a class name of errors

69
00:05:11,050 --> 00:05:19,510
like so now materialized CSSA doesn't have any very good error handling out of the box for formatting

70
00:05:19,510 --> 00:05:21,260
or displaying error messages.

71
00:05:21,370 --> 00:05:27,010
And that's just because materialized SS assumes that you're using their j queery library or their javascript

72
00:05:27,010 --> 00:05:32,650
library that uses Jaker internally I believe to handle all the validation and stuff like that on the

73
00:05:32,650 --> 00:05:33,350
screen.

74
00:05:33,490 --> 00:05:39,820
So there's not really a go to solution for handling styling of validation errors.

75
00:05:39,820 --> 00:05:45,250
Whenever you're using materialized VSS with react so we're going to add in a little bit of our own custom

76
00:05:45,390 --> 00:05:49,780
CSSA just to color this thing read in just a moment.

77
00:05:49,780 --> 00:05:54,870
Let's first test this thing out and then we can make sure that it's working the way we expect.

78
00:05:54,920 --> 00:06:00,790
Going to flip on over to my browser or refresh the whole page.

79
00:06:00,950 --> 00:06:03,860
Looks like I probably have an error message in here.

80
00:06:04,300 --> 00:06:10,960
I probably made a typo somewhere so let's figure out what's going wrong with that this not.

81
00:06:11,020 --> 00:06:12,240
Errors is not a function.

82
00:06:12,250 --> 00:06:15,310
Ok I know exactly what what ran what went wrong.

83
00:06:15,310 --> 00:06:16,230
Excuse me.

84
00:06:16,240 --> 00:06:19,820
So inside of the auth form I call this Propst.

85
00:06:20,380 --> 00:06:22,790
Should be this stuff on Aristotle map.

86
00:06:22,900 --> 00:06:24,510
So we're mapping of the list of errors.

87
00:06:24,520 --> 00:06:27,480
I was calling it as though it were a function when in fact it was an array.

88
00:06:27,480 --> 00:06:28,680
So my mistake.

89
00:06:28,690 --> 00:06:32,000
I apologize if that caused any confusion there.

90
00:06:32,780 --> 00:06:37,980
OK so now let's give it another shot or refresh the page again.

91
00:06:37,990 --> 00:06:44,960
I did this for studiers is not a function so I probably failed to save the file and that's better.

92
00:06:45,350 --> 00:06:50,330
OK so by default when my form first renders I don't have any error messages.

93
00:06:50,560 --> 00:06:56,030
So the error array or this start statement is a race starts out it is completely empty.

94
00:06:56,110 --> 00:07:01,210
It's only when I start clicking submit that I would expect to see the text invalid credentials appear

95
00:07:01,210 --> 00:07:02,120
on the screen.

96
00:07:02,590 --> 00:07:04,420
So that's looking pretty darned good.

97
00:07:04,420 --> 00:07:07,420
Let's refresh again and just test it out again.

98
00:07:07,420 --> 00:07:13,180
If I click Submit boom I get this nice little message appear for the user that just lets them know hey

99
00:07:13,180 --> 00:07:15,920
something went wrong with your log request.

100
00:07:16,120 --> 00:07:19,780
So let's see we really have to do here is make sure that we get just a little bit of styling on this

101
00:07:19,780 --> 00:07:20,320
thing.

102
00:07:21,830 --> 00:07:31,160
The start a project that we are working from does not have any style tags or any place to add success

103
00:07:31,200 --> 00:07:38,650
natively inside of it for us we can either add in a little bit of elements styling on the day itself

104
00:07:39,050 --> 00:07:45,450
we can create a CSSA file or I think what might be easiest for us is to just add a style tag directly

105
00:07:45,450 --> 00:07:48,090
to the index not HMO file.

106
00:07:48,120 --> 00:07:52,200
I think we'll just do that because I really don't expect to have to add a lot of custom CSSA to this

107
00:07:52,200 --> 00:07:53,610
project.

108
00:07:53,610 --> 00:07:59,990
So inside of the indexed HTL file in the head tag was going to add on the style tag.

109
00:08:01,530 --> 00:08:06,490
And I'll say if there's any elements with the class name of heirs.

110
00:08:06,510 --> 00:08:08,590
Let's just give it a color of red.

111
00:08:08,730 --> 00:08:11,810
Like some.

112
00:08:11,870 --> 00:08:14,780
So let's now refresh this.

113
00:08:14,870 --> 00:08:22,050
And if I click submit again which should immediately render an air I end up with a nice read error message.

114
00:08:22,930 --> 00:08:25,230
They are missing from here is kind of ugly.

115
00:08:25,250 --> 00:08:29,070
I feel like it's a little bit too close to the button and too far from the input.

116
00:08:29,240 --> 00:08:34,130
So if you want to increase the font size of it a little bit if you want to bold it whatever you want

117
00:08:34,130 --> 00:08:37,050
to do absolutely feel free to do so.

118
00:08:37,520 --> 00:08:45,020
The other thing that we might think about doing is inspecting the list of errors inside of our off form

119
00:08:45,020 --> 00:08:45,960
component.

120
00:08:46,190 --> 00:08:52,670
And if the list of errors has a length of 1 or greater then I might also add a class name to each of

121
00:08:52,670 --> 00:08:57,130
my input fields as well to get the input itself to highlight and read.

122
00:08:57,380 --> 00:09:02,660
And I would just further communicate to our users that hey you're entering some invalid information

123
00:09:02,660 --> 00:09:03,740
in both these inputs here.

124
00:09:03,740 --> 00:09:08,750
Please try again so you can also take that approach if you feel like the error message down here isn't

125
00:09:08,750 --> 00:09:13,430
quite enough to communicate the list of errors to the user.

126
00:09:13,560 --> 00:09:19,110
OK so that's error handling inside of Appollo.

127
00:09:19,160 --> 00:09:26,300
Again the big takeaway here was that on the mutation itself we added on a catch case and inside the

128
00:09:26,300 --> 00:09:29,560
catch case we inspected the list of graphical errors.

129
00:09:29,750 --> 00:09:34,790
We collected a list of every single error message and then we updated our component level state with

130
00:09:34,790 --> 00:09:41,520
that error list and then showed it to the screen on the screen to our users for the most part.

131
00:09:41,540 --> 00:09:46,820
I generally only add in error handling around mutations because I usually expect that all my queries

132
00:09:46,820 --> 00:09:49,320
are going to function as I expect.

133
00:09:49,340 --> 00:09:54,530
Really the only time where queries start to get a little bit weird as far as error handling goes is

134
00:09:54,530 --> 00:10:00,260
if I start to have a lot of permissions or authorization issues around the queries themselves but will

135
00:10:00,260 --> 00:10:04,640
figure out a couple of strategies later on to minimize the number of cases where we run into errors

136
00:10:04,640 --> 00:10:09,630
around authorization of resources that a user can access.

137
00:10:10,130 --> 00:10:11,560
So this is looking pretty good.

138
00:10:11,600 --> 00:10:16,100
I think that we are about ready to move on to the sign up form.

139
00:10:16,100 --> 00:10:21,380
We also need to keep in mind that we need to handle the case in which the users successfully authenticates

140
00:10:21,390 --> 00:10:26,090
some here we need to make sure that we navigate them to somewhere else inside of our application as

141
00:10:26,090 --> 00:10:26,620
well.

142
00:10:26,810 --> 00:10:32,360
So if a user does log in correctly we need to make sure we forcibly navigate them somewhere else as

143
00:10:32,360 --> 00:10:32,920
well.

144
00:10:33,170 --> 00:10:38,660
So we need to update our mutation here just a little bit to handle the of the success case.

145
00:10:38,750 --> 00:10:41,830
And we also need to start working on our sign up form as well.

146
00:10:42,020 --> 00:10:44,790
So let's take care of both of those challenges in the next section.

