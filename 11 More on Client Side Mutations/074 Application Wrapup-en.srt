1
00:00:00,670 --> 00:00:05,860
We've pretty much wrapped up our application our users have the ability to create new songs they can

2
00:00:05,860 --> 00:00:12,790
delete existing songs then they can create new lyrics that are associated with a song in upload or like

3
00:00:12,820 --> 00:00:15,600
individual lyrics associated with each song.

4
00:00:15,670 --> 00:00:21,430
I want to take a little bit of time now to do a quick wrap up on some of the really big important topics

5
00:00:21,490 --> 00:00:22,900
around the application.

6
00:00:23,210 --> 00:00:30,970
So let's open up our code editor and open up our song create file the suncream file is a good representation

7
00:00:31,030 --> 00:00:35,900
of a typical component that I would expect to see inside of a graft application.

8
00:00:36,850 --> 00:00:38,320
Some big things in here.

9
00:00:38,320 --> 00:00:44,130
Remember that we make use of the re-act Apollo library to take a query and sandwich it together with

10
00:00:44,130 --> 00:00:45,490
a component.

11
00:00:45,490 --> 00:00:50,830
This means that inside of a typical re-act application I would expect to see some number of components

12
00:00:51,100 --> 00:00:55,080
that are joined together with queries or mutations.

13
00:00:55,090 --> 00:01:02,500
Next we made use the graph Cuil tag library to be able to write actual graphical queries or mutations

14
00:01:02,500 --> 00:01:05,030
directly inside of a javascript file.

15
00:01:05,470 --> 00:01:13,040
We saw the implementation at the very bottom of this where we wrote the GQ l tag and then a query string

16
00:01:13,400 --> 00:01:15,740
and put the query inside of the query string.

17
00:01:17,650 --> 00:01:21,690
The next thing I want to talk about is some of the ways in which we manipulated our data.

18
00:01:21,940 --> 00:01:28,810
We saw that we manipulated our data on the back end by making use of different mutations in every single

19
00:01:28,810 --> 00:01:33,220
case that we call the mutation we passed along some number of query variables.

20
00:01:33,340 --> 00:01:38,800
In some cases we were able to call the query variable or excuse me passed the query variable directly

21
00:01:38,800 --> 00:01:39,940
and when we called it.

22
00:01:40,200 --> 00:01:44,980
And in some of the locations we had to do a little bit of fun mingling to figure out exactly how we'd

23
00:01:44,980 --> 00:01:48,710
get some query variables into one of our queries.

24
00:01:48,730 --> 00:01:55,300
The other big thing that we spoke about was how to refresh our data we saw how to refresh our data immediately

25
00:01:55,300 --> 00:02:01,930
after running mutate by executing this refits queries we're not executing him but providing some number

26
00:02:01,930 --> 00:02:09,400
of options to it with refits queries we can automatically rerun an entire query after the mutation has

27
00:02:09,400 --> 00:02:11,800
been successfully completed.

28
00:02:11,830 --> 00:02:16,810
This is a great way to refresh the data in your application but do be aware that it makes an entire

29
00:02:16,870 --> 00:02:21,760
nother request to your backend to fetch that updated data.

30
00:02:21,820 --> 00:02:27,400
One of the better ways of handling responses from our back end or I should say more performant ways

31
00:02:27,700 --> 00:02:34,990
was by wiring up the use of that data ID from object inside of our top level index J.S. file.

32
00:02:35,260 --> 00:02:40,900
Remember that by default the Apollo client doesn't really know about the data that is coming back from

33
00:02:40,900 --> 00:02:41,770
the back end.

34
00:02:41,980 --> 00:02:44,330
All it knows is that it issues a query.

35
00:02:44,360 --> 00:02:49,530
It gets back some information and then it provides that information directly to a component.

36
00:02:49,870 --> 00:02:56,740
If we then make a nother query and another component without defining this data ID from object then

37
00:02:56,740 --> 00:03:04,150
Apollo just instantly assumes that that is to completely separate queries to completely separate sets

38
00:03:04,150 --> 00:03:11,620
of data coming from the backend when in fact it might be the exact same query running again to make

39
00:03:11,620 --> 00:03:16,600
sure that Appollo client can keep track of all the different records that are coming from back and we

40
00:03:16,600 --> 00:03:24,540
define this data ID from object function the data ID from object function makes use of the id property

41
00:03:24,790 --> 00:03:27,650
of every record that we fetch from our backend.

42
00:03:27,670 --> 00:03:30,040
Now there are some assumptions behind this right here.

43
00:03:30,070 --> 00:03:37,330
It does assume that we are using unique IDs between all the different records out and our entire application

44
00:03:38,020 --> 00:03:39,440
when we're using Mongo D-B.

45
00:03:39,460 --> 00:03:45,490
That's a very safe assumption to make because we are generally guaranteed that all the different IDs

46
00:03:45,580 --> 00:03:50,740
stored in a mongo D-B database are going to be unique even across different collections.

47
00:03:50,740 --> 00:03:54,760
So again that's a pretty safe assumption to make.

48
00:03:54,760 --> 00:03:58,780
The last thing I want to talk about is how we make an individual query.

49
00:03:59,020 --> 00:04:02,990
So for that let's check out our song detail component.

50
00:04:03,160 --> 00:04:07,750
So this is really graph Cuil 101 that we saw graph kill 101.

51
00:04:07,830 --> 00:04:13,450
Write the query wrap it with a graph to add a helper and then pass in the component that should receive

52
00:04:13,450 --> 00:04:14,730
that data.

53
00:04:14,770 --> 00:04:20,850
We saw that when we put together a query with the component component then received some amount of data.

54
00:04:20,980 --> 00:04:23,880
As this props data.

55
00:04:24,250 --> 00:04:30,160
Now the downside was that the component would try to render at least one time before that Data had actually

56
00:04:30,160 --> 00:04:31,300
been fetched.

57
00:04:31,300 --> 00:04:36,070
So we do need to make sure that whenever we put together a component that expects to have some data

58
00:04:36,430 --> 00:04:41,170
we have to check to make sure that data is available before attempting to make use of it inside the

59
00:04:41,170 --> 00:04:46,880
component this right here is a pattern that I would expect to see just all over the place throughout

60
00:04:46,880 --> 00:04:48,080
your application.

61
00:04:48,110 --> 00:04:53,090
I really would expect you to always make sure that your data is available before you try to consume

62
00:04:53,090 --> 00:04:58,640
it in some way otherwise you're going to run into a lot of issues where you see errors like cannot read

63
00:04:58,750 --> 00:05:01,010
properly something of undefined.

64
00:05:01,010 --> 00:05:05,470
So in this case cannot read property title of undefined.

65
00:05:06,070 --> 00:05:06,500
OK.

66
00:05:06,530 --> 00:05:11,480
So I think that's pretty much it for the high level topics that we covered inside this application we've

67
00:05:11,480 --> 00:05:18,110
covered up pretty good a number of features on the front end using Appollo client and react with our

68
00:05:18,110 --> 00:05:19,960
graph to a back end.

69
00:05:20,030 --> 00:05:24,500
We're now going to move onto our next section where we're going to think about how to put together a

70
00:05:24,500 --> 00:05:28,130
full stack react and graphical application.

71
00:05:28,280 --> 00:05:31,780
So everything from the database all the way to the front end.

72
00:05:32,060 --> 00:05:35,450
Let's continue and take care of that in the next section.

