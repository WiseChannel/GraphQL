1
00:00:00,580 --> 00:00:04,490
In the last section we made our first query with the graphical tool.

2
00:00:05,060 --> 00:00:11,810
However if we look in our schema file we are using a static list of users right here just a hard coded

3
00:00:11,810 --> 00:00:13,160
list of users.

4
00:00:13,220 --> 00:00:16,580
And for me that is so boring so boring.

5
00:00:16,580 --> 00:00:17,950
I hate using hard coded data.

6
00:00:17,950 --> 00:00:20,450
I like using live dynamic data.

7
00:00:20,450 --> 00:00:25,790
So in this section we're going to investigate some different architectures of how to build and serve

8
00:00:25,790 --> 00:00:31,370
data to a graphical application and then we'll swap out the source of data from this hard coded list

9
00:00:31,370 --> 00:00:35,770
of users to something at least a little bit more dynamic.

10
00:00:35,870 --> 00:00:40,210
Still not going to be backed by a full database but it will be at least a little bit better and we'll

11
00:00:40,210 --> 00:00:43,100
see what we've got right now.

12
00:00:43,100 --> 00:00:48,680
So let's look at a diagram to help us understand some of the different ways to architect a graph to

13
00:00:48,680 --> 00:00:50,330
our application.

14
00:00:50,330 --> 00:00:55,460
So we've looked at this particular diagram once already and this kind of vaguely mirrors kind of where

15
00:00:55,460 --> 00:00:57,250
we're headed towards right now.

16
00:00:57,530 --> 00:01:04,160
We've got our browser running graphical as sends a graphical query to our express server and then in

17
00:01:04,160 --> 00:01:10,250
theory we could have like a local Mongo D-B database or my sequela or postgresql whatever it might be

18
00:01:10,640 --> 00:01:16,310
where we could reach in and grab our data out and return that piece of data from our resolve method

19
00:01:16,910 --> 00:01:17,360
member.

20
00:01:17,390 --> 00:01:25,020
Resolve being the very magical location where we actually go and find a piece of data and return it.

21
00:01:25,040 --> 00:01:31,340
So if you are working on any smaller sized project this is very likely the architecture that you're

22
00:01:31,340 --> 00:01:33,020
going to be headed towards.

23
00:01:33,350 --> 00:01:35,010
Let's look at another option.

24
00:01:35,240 --> 00:01:41,480
This other option is something that is much more likely to be used by a large company or companies with

25
00:01:41,570 --> 00:01:44,970
lots of infrastructure and lots of separate services.

26
00:01:45,050 --> 00:01:48,050
Facebook in particular is like the perfect example.

27
00:01:48,050 --> 00:01:49,760
This is what they do internally.

28
00:01:50,090 --> 00:01:54,850
So Facebook internally does not have a single monolithic data store.

29
00:01:54,860 --> 00:01:58,610
You know they don't have like a single My sequel database.

30
00:01:58,610 --> 00:02:01,530
And just you know running queries through that thing all the time.

31
00:02:01,790 --> 00:02:05,850
Instead they have many many different internal systems.

32
00:02:05,960 --> 00:02:11,960
Some systems might store user data while another system might serve up some rendah recommended articles

33
00:02:12,230 --> 00:02:14,520
that the current user may be interested in.

34
00:02:15,790 --> 00:02:23,250
Craft can serve as a proxy of sorts to go and fetch data from all of these different sources pull all

35
00:02:23,250 --> 00:02:27,080
the data together and ship a response back to our user.

36
00:02:27,090 --> 00:02:34,440
So in this case we might say that our graphical server makes an H TTP request to some outside server

37
00:02:34,500 --> 00:02:36,550
which has its own database.

38
00:02:36,750 --> 00:02:39,130
Maybe it also hits us outside API.

39
00:02:39,240 --> 00:02:41,520
This outside server that has its own database.

40
00:02:41,520 --> 00:02:46,100
However many outside sources of data that we want to go and reach out to.

41
00:02:46,230 --> 00:02:52,240
We can we can go out and grab that data and then send it back as a response with our graph Well Querrey

42
00:02:53,430 --> 00:02:58,950
So when this course we're going to try out both these approaches and we're going to go both with the

43
00:02:58,950 --> 00:03:06,240
database based approach and with this outside server type approach where we make an actual age request

44
00:03:06,240 --> 00:03:13,620
to some remote API for this first application where we want to just query over a list of users companies

45
00:03:13,620 --> 00:03:14,730
and positions.

46
00:03:14,940 --> 00:03:20,730
Let's go with this approach right here where we're going to have an outside server or third party API

47
00:03:21,000 --> 00:03:23,360
that's going to service up some amount of data.

48
00:03:23,460 --> 00:03:23,890
OK.

49
00:03:24,040 --> 00:03:27,920
So we're going to follow this type of approach.

50
00:03:27,990 --> 00:03:34,410
So the idea here whenever a user makes a query or whenever you know realistically you and I press play

51
00:03:34,410 --> 00:03:38,480
on here our express server will receive the query.

52
00:03:38,910 --> 00:03:45,840
It will then reach out to some other API with the network request it'll fetch the data assemble the

53
00:03:45,840 --> 00:03:50,860
graph queue response and ship it back to our graphical client.

54
00:03:50,940 --> 00:03:52,090
That's the goal.

55
00:03:52,620 --> 00:03:58,610
So this means that we need to stand up a second server to act as our outside source of data.

56
00:03:58,620 --> 00:04:01,980
We're like the third party API like this outside API.

57
00:04:02,250 --> 00:04:07,890
So we're going to make a separate server to act as this outside API.

58
00:04:07,890 --> 00:04:10,350
Now this is a course about graph to of course.

59
00:04:10,350 --> 00:04:14,210
So we're not going to spend too much time working on this outside source of data.

60
00:04:14,400 --> 00:04:21,360
Instead we're just going to use this fantastic little framework called Jaison server to host all of

61
00:04:21,360 --> 00:04:22,300
our data.

62
00:04:22,680 --> 00:04:30,330
Let's check out the home page for on server in my browser and search for just Jason server like so and

63
00:04:30,330 --> 00:04:31,870
then find the first link.

64
00:04:34,810 --> 00:04:42,340
So this project right here is all about building very small very fast fake little API is to serve up

65
00:04:42,340 --> 00:04:44,250
some amount of data.

66
00:04:44,410 --> 00:04:48,460
It's really easy to get started with really I'm just showing the documentation here in case you want

67
00:04:48,460 --> 00:04:49,550
to read it yourself.

68
00:04:49,780 --> 00:04:53,030
But we'll get start with the implementation right away.

69
00:04:53,110 --> 00:04:57,970
The crux of the implementation is that we have to create a DVD case on file.

70
00:04:58,030 --> 00:05:03,410
We add some amount of data to that file and then we start up a server by running Jason's server.

71
00:05:03,490 --> 00:05:04,590
That's pretty much it.

72
00:05:05,050 --> 00:05:07,660
So let's give it a shot.

73
00:05:07,660 --> 00:05:13,900
Back at the command line I'm going to stop my server and then I'm going to install the Jaison on server

74
00:05:13,960 --> 00:05:21,060
library with the command NPM install dash dash save on dash server.

75
00:05:21,100 --> 00:05:31,950
Like so next in my code editor I'm going to make a new file called D-B Jason.

76
00:05:32,160 --> 00:05:38,070
So this is the file that we just saw list inside the documentation and inside of here we'll paste in

77
00:05:38,070 --> 00:05:41,160
some of the data that we want our server to serve up.

78
00:05:41,190 --> 00:05:47,600
So I'm going to say if anyone comes in Access is the route users on my server.

79
00:05:47,880 --> 00:05:50,850
I want to return back a list of users.

80
00:05:51,460 --> 00:05:57,560
So I will say the each user should have an ID a first name

81
00:06:01,390 --> 00:06:07,040
and in age do make sure that you're using double quotes around all these.

82
00:06:07,060 --> 00:06:10,190
This is a Jason File not a javascript file.

83
00:06:10,240 --> 00:06:15,440
And so valid Jaison requires double quotes not single quotes.

84
00:06:16,270 --> 00:06:19,840
I'll make one other user get an idea of 40

85
00:06:23,640 --> 00:06:26,080
a name of Alex.

86
00:06:26,650 --> 00:06:28,470
And in the age of 40.

87
00:06:28,510 --> 00:06:29,160
Why not.

88
00:06:29,500 --> 00:06:30,960
OK so it looks good for now.

89
00:06:32,870 --> 00:06:38,900
Now to be clear this is one server that we're making is going to be a completely separate running process

90
00:06:38,960 --> 00:06:40,670
from our normal graft server.

91
00:06:40,700 --> 00:06:43,460
So completely separate completely decoupled.

92
00:06:43,460 --> 00:06:48,850
It is hosted inside the same project directory but that's about it.

93
00:06:48,860 --> 00:06:54,820
We do have to start the server up separately from our own graph server to do so.

94
00:06:54,830 --> 00:06:59,260
I'm going to add a little helper script inside of my package Scott Giese on file.

95
00:06:59,390 --> 00:07:06,380
So going to find my package got some file it is going to find the scripts section and I'm going to add

96
00:07:06,380 --> 00:07:16,040
in another script with the name of Jason colon server and that will run the command JS on server dash

97
00:07:16,040 --> 00:07:21,570
dash watch DV dot Jaison like so go.

98
00:07:21,620 --> 00:07:25,760
So now we're going to flip back over to my terminal and we're going to start up this news server that

99
00:07:25,760 --> 00:07:27,120
we just created.

100
00:07:27,590 --> 00:07:30,540
So I'm going to open up a second terminal window.

101
00:07:31,070 --> 00:07:36,260
You can do so by getting control t if you're using Terminal on OSX.

102
00:07:36,260 --> 00:07:41,180
For me personally I'm using I term song and use a fancy little feature by doing a Windows split like

103
00:07:41,180 --> 00:07:43,870
so in the new window.

104
00:07:43,910 --> 00:07:52,940
I'm going to start up this new Jay Sun server by running the command NPM run and then Jason Colan server

105
00:07:54,020 --> 00:07:56,370
like the CO.

106
00:07:56,670 --> 00:07:58,120
So it says loading D-B.

107
00:07:58,130 --> 00:07:59,850
Jason great.

108
00:07:59,940 --> 00:08:05,060
Everything is running successfully on local colon three thousand slash users.

109
00:08:05,070 --> 00:08:09,780
So just as a quick test I'm going to copy this link and let's visit it in the browser.

110
00:08:09,780 --> 00:08:12,280
Just make sure everything's working OK.

111
00:08:12,330 --> 00:08:12,660
Cool.

112
00:08:12,690 --> 00:08:17,140
Looks like we're successful in getting our data served up here so we can go to slash users.

113
00:08:17,150 --> 00:08:22,900
I can also go to it's slash user slash 23 and that should give me the user bill.

114
00:08:23,310 --> 00:08:27,030
So you can tell that this Dusan server thing right here is all it's fantastic.

115
00:08:27,030 --> 00:08:27,670
I love it.

116
00:08:27,690 --> 00:08:32,070
It's just the best little server for running with some fake data.

117
00:08:32,070 --> 00:08:34,600
When you're in a development environment.

118
00:08:35,340 --> 00:08:41,030
So let's now continue in the next section and we're going to figure out how to take our graph to all

119
00:08:41,040 --> 00:08:48,420
server and make a query over to this outside API to fetch some data about a very particular user and

120
00:08:48,420 --> 00:08:51,900
then send it back to our browser in a graph a query.

