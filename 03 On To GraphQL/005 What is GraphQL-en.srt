1
00:00:00,880 --> 00:00:06,100
We've had a chance to discuss some restful routeing now and we've made a case of where it seems to fall

2
00:00:06,100 --> 00:00:07,840
just a little bit short.

3
00:00:07,840 --> 00:00:13,720
Remember there are three different areas where restful routing seems to kind of come up with some issues

4
00:00:14,080 --> 00:00:14,580
first.

5
00:00:14,740 --> 00:00:20,810
Deciding on a u r l schema gets tough when we start to have heavily nested relationships.

6
00:00:20,950 --> 00:00:27,910
Second when fetching heavily nested data we can easily run into situations where we make too many HTP

7
00:00:27,940 --> 00:00:30,970
requests to get the data that we need.

8
00:00:30,970 --> 00:00:38,320
Third we are vulnerable to over fetching data where we fetch an entire company when maybe we really

9
00:00:38,320 --> 00:00:41,340
only needed the Name property of that company.

10
00:00:42,430 --> 00:00:47,620
Keep in mind that with each of these issues there are definitely problems can be solved but coming up

11
00:00:47,620 --> 00:00:51,030
with solutions like this kind of takes a lot of engineering time.

12
00:00:51,040 --> 00:00:55,750
So we always want to be aware of how much time we're spending on solving any given problem.

13
00:00:55,840 --> 00:01:02,450
And this is where a graph comes in and allows us to solve these issues in a very timely fashion.

14
00:01:02,470 --> 00:01:07,960
So in this section I want to spend a little bit of time to tell you exactly what Kraft Cuil does to

15
00:01:07,960 --> 00:01:12,760
solve each of these inherent pieces of confusion around restful and routing.

16
00:01:13,180 --> 00:01:19,000
Let's think back to our diagram of our current user who is trying to fetch some details about their

17
00:01:19,000 --> 00:01:20,180
friends.

18
00:01:20,230 --> 00:01:27,020
This user had some friends and each friend had a company and the position records associated with it.

19
00:01:27,040 --> 00:01:32,770
Right now we're looking at this diagram in a sort of tree fashion where we start with the current user

20
00:01:33,100 --> 00:01:35,740
and then we look at the users they're associated with.

21
00:01:35,800 --> 00:01:38,970
And then we look at the associated companies and positions with them.

22
00:01:38,980 --> 00:01:45,320
So everything is focused around this current user or it's all from this current user's viewpoint.

23
00:01:45,730 --> 00:01:50,560
Now I'm going to change up this diagram in a big way and rather than looking at everything from the

24
00:01:50,560 --> 00:01:57,160
viewpoint of this single user I want to imagine all of the data in this application all the data in

25
00:01:57,160 --> 00:02:02,770
this imaginary database including all the users all the positions and all the companies.

26
00:02:02,770 --> 00:02:08,200
So the diagram I'm going to swap to is going to look just a little bit crazy but really it is conveying

27
00:02:08,290 --> 00:02:11,250
very similar information as what we're seeing right now.

28
00:02:11,440 --> 00:02:11,780
OK.

29
00:02:11,830 --> 00:02:12,670
So let's look at it.

30
00:02:13,560 --> 00:02:20,550
Toga this program right here shows a graph of all the relations in our application.

31
00:02:20,550 --> 00:02:26,970
When I say graph I'm not talking about the type of char you find in an Excel spreadsheet or your favorite

32
00:02:26,970 --> 00:02:34,110
spreadsheet application a graph is a data structure that contains notes which are symbolized by all

33
00:02:34,110 --> 00:02:41,970
the different rectangles in here and relations between each of these nodes which referred to as edges.

34
00:02:41,970 --> 00:02:48,990
So this is the graph that graph Cuil is referring to and understanding how our information fits into

35
00:02:48,990 --> 00:02:55,570
a graph data structure like this is key to understanding how graph Cuil works.

36
00:02:55,590 --> 00:02:59,880
One thing I want to mention about this graph structure right here is that I'm not saying that we're

37
00:02:59,880 --> 00:03:04,350
going to change how our data is being stored in a database or anything like that.

38
00:03:04,380 --> 00:03:10,140
We can still use Mangu D-B post-Christmas sequel whatever you want to use to store data.

39
00:03:10,320 --> 00:03:15,600
We're just looking at this diagram to kind of visualize how all of our data is connected together via

40
00:03:15,600 --> 00:03:23,410
all the different relations OK now that our data is organized into a graph.

41
00:03:23,690 --> 00:03:31,600
I can't take all my different users in assign some IDs to them once we've got all of our data in this

42
00:03:31,600 --> 00:03:32,350
graph structure.

43
00:03:32,350 --> 00:03:37,420
What do we do with it and how do we kind of query about the information that is contained in here.

44
00:03:37,780 --> 00:03:43,210
Well once we have organized our data into a graph we can query it using graph.

45
00:03:43,210 --> 00:03:47,360
Q Well so let's see an example of what this might look like.

46
00:03:47,410 --> 00:03:52,760
OK we're going to kind of picture a graph Cuil Querrey running along this graph right here.

47
00:03:53,260 --> 00:03:57,570
Let's imagine that we want to start with user 23 right here.

48
00:03:57,820 --> 00:04:02,410
I want to find all of their friends who are other users in the application.

49
00:04:02,650 --> 00:04:07,040
And then I want to find all of the companies that those users work at.

50
00:04:07,390 --> 00:04:07,840
OK.

51
00:04:07,990 --> 00:04:12,820
So let's visualize how we would form a query or ask a question like that graph.

52
00:04:12,820 --> 00:04:14,360
Q Well.

53
00:04:14,840 --> 00:04:21,330
Well first we would telegraph Cuil that we wanted to go and find the user with ID 23.

54
00:04:21,550 --> 00:04:27,490
Next we would telegraph to L to go and find all the friends associated with Graph TV or seen it with

55
00:04:27,490 --> 00:04:29,480
user 23.

56
00:04:29,500 --> 00:04:36,640
Finally we would telegraph to L to find the company associated with all of those friends and get like

57
00:04:36,640 --> 00:04:40,060
you name the name property off of it or something like that.

58
00:04:40,060 --> 00:04:46,960
So in summary we started by telling graph 12 to go and look at a very particular record like this record

59
00:04:46,960 --> 00:04:54,900
right here and then crawl through all the records associated with it to instruct how to how to excuse

60
00:04:54,900 --> 00:05:02,140
me to instruct graph you all on how to do this in practice we write and execute what is called a Querrey.

61
00:05:02,220 --> 00:05:06,270
So lets look at a query that would do something very similar to what we just saw.

62
00:05:06,270 --> 00:05:12,060
Like start with a particular user and then go find the associated friends companies names.

63
00:05:12,420 --> 00:05:16,260
So the query that we're about to write you know we're just going to do right here on the side of this

64
00:05:16,260 --> 00:05:20,160
diagram is going to look really familiar.

65
00:05:20,160 --> 00:05:24,060
Once we start working with Graph Well it's going to look like javascript right now it might look a little

66
00:05:24,060 --> 00:05:28,120
bit weird but trust me we're going to get really familiar with queries with graphs.

67
00:05:28,130 --> 00:05:30,750
Q Well I'll get.

68
00:05:31,420 --> 00:05:37,240
So this is going to be the query that we would write to go from user 23 all the way up to the company

69
00:05:37,240 --> 00:05:37,900
up here.

70
00:05:40,640 --> 00:05:44,760
First we start off by telegraph whether we want to make a query.

71
00:05:44,780 --> 00:05:51,560
So I would say query and then open curly braces and then I would say I want to find a user with ID of

72
00:05:51,560 --> 00:05:56,940
23 that will telegraph to L to look at this user right here.

73
00:05:58,030 --> 00:06:05,050
Next we'll Telegraph cue that we want to find all the users who are friends of the initial user so to

74
00:06:05,050 --> 00:06:12,250
crawl along to the next layer the next set of relations right here we are in friends like so now you

75
00:06:12,250 --> 00:06:15,710
might be curious why I'm saying friends right here and not like users again.

76
00:06:15,760 --> 00:06:16,720
Well we'll get used to it.

77
00:06:16,720 --> 00:06:17,910
We'll talk about that.

78
00:06:17,920 --> 00:06:21,440
But really we could consider them to be just users as well.

79
00:06:21,700 --> 00:06:26,890
Either way we're essentially telling graph to kind of walk this graph a little bit like walk to the

80
00:06:26,890 --> 00:06:35,450
next relation walk to the next node and now the last step would go from friends to finding all of the

81
00:06:35,480 --> 00:06:38,990
companies associated with those friends so I would say company.

82
00:06:39,170 --> 00:06:44,420
And then because I want the name property out of every single company I would write out name like so

83
00:06:46,260 --> 00:06:46,810
OK.

84
00:06:47,100 --> 00:06:49,700
So this is the first query that we're going to look at.

85
00:06:49,710 --> 00:06:55,280
We're going to implement this ourselves inside of a graphical application.

86
00:06:55,670 --> 00:07:00,260
I only right now I don't like expect you to understand the syntax of queries at all.

87
00:07:00,290 --> 00:07:01,590
No not whatsoever.

88
00:07:01,590 --> 00:07:06,690
I just want to give you an example of how we take a query and we can imagine that is walking along a

89
00:07:06,690 --> 00:07:12,700
graph for every single statement in the query that we have got.

90
00:07:13,350 --> 00:07:16,960
Let's take a quick break because there's been a lot of crazy stuff.

91
00:07:17,130 --> 00:07:21,880
Let's take a quick break and then start working on a practical example of this in the next section.

