1
00:00:01,110 --> 00:00:03,570
Let's get to work on our result function.

2
00:00:03,570 --> 00:00:11,250
So from this function we want to return a very particular user the user with some given ID for this

3
00:00:11,250 --> 00:00:12,770
first iteration through our app.

4
00:00:12,780 --> 00:00:16,050
We're going to skip the use of any fancy database or anything like that.

5
00:00:16,140 --> 00:00:19,860
And instead we're going to work with some hard coded data.

6
00:00:19,860 --> 00:00:25,740
So we're going to hard code in a list of users and then walk through that list of users and return some

7
00:00:26,010 --> 00:00:28,680
one of the users from this resolve function right here.

8
00:00:28,770 --> 00:00:34,890
It's going to go up to the top of my schema file and we'll make a hard coded list of users.

9
00:00:35,010 --> 00:00:37,970
So say Konst users that will be an array.

10
00:00:38,160 --> 00:00:43,100
And let's just add in two quick users in here will see that every user has an ID.

11
00:00:43,350 --> 00:00:51,440
I'll get my first one ID of 23 a first name of Bill an age of 20.

12
00:00:51,600 --> 00:01:03,850
I will also make another user with an idea of 47 a first name of Samantha and an age of 21 cool.

13
00:01:04,140 --> 00:01:07,380
I'm also going to require in low Dasch while we're up here.

14
00:01:07,380 --> 00:01:13,010
So say Konst underscore vehicles require low dash load acts as a helper library.

15
00:01:13,020 --> 00:01:19,110
It just helps us walk through collections of data and work through collections of data for us in particular.

16
00:01:19,120 --> 00:01:24,430
We're going to use it to walk through the list of users and find a user with a very particular ID.

17
00:01:24,450 --> 00:01:27,590
So just a little help at the library for us to use.

18
00:01:27,960 --> 00:01:31,080
So now let's go back down to our resolved function.

19
00:01:31,080 --> 00:01:37,560
Remember the root query right here is what points us to a very particular record in our graph of all

20
00:01:37,560 --> 00:01:40,060
the different data records that we have.

21
00:01:40,500 --> 00:01:48,930
We've said that the root query has the expectation of receiving an ID as an argument when the ID gets

22
00:01:48,930 --> 00:01:53,080
passed in it will be available on this args object right here.

23
00:01:53,430 --> 00:02:00,380
So to find the user with the given ID inside of that users array that we just created we can write out

24
00:02:00,660 --> 00:02:09,160
return underscore dot find users and then an object with ID and ARGs Id like.

25
00:02:09,160 --> 00:02:13,820
So if you're not familiar with load ASH no problem.

26
00:02:14,100 --> 00:02:16,520
We are walking through our list of users.

27
00:02:16,740 --> 00:02:25,130
So go through all the users and find and return the first user who has an ID equal to arge start ID.

28
00:02:25,230 --> 00:02:32,550
And remember this ArcSight ID right here will be provided to the query when the query is made.

29
00:02:32,940 --> 00:02:35,230
So that's our resolve function right now.

30
00:02:35,250 --> 00:02:40,560
We're going to come back and improve it make a little bit more robust make sure that we're not using

31
00:02:40,590 --> 00:02:43,940
a hard coded list of data which would be much more interesting.

32
00:02:43,950 --> 00:02:47,810
But right now we want to just kind of get something up on the screen.

33
00:02:48,000 --> 00:02:53,490
So at this point in time if I was in your shoes learning graph Cuil for the first time at this point

34
00:02:53,490 --> 00:02:57,760
I'd probably be saying what the heck is this root Querrey doing.

35
00:02:58,080 --> 00:03:00,180
What is this Arkes thing.

36
00:03:00,180 --> 00:03:01,680
What is this resolve thing.

37
00:03:01,680 --> 00:03:03,650
This is crazy this is madness.

38
00:03:03,780 --> 00:03:05,210
Yes I completely agree.

39
00:03:05,220 --> 00:03:06,600
Well maybe you think it's still normal.

40
00:03:06,600 --> 00:03:10,740
I don't know the first time I looked all this I said yeah this is pretty heavy duty stuff and it really

41
00:03:10,740 --> 00:03:10,890
is.

42
00:03:10,890 --> 00:03:12,700
It is heavy duty stuff.

43
00:03:12,810 --> 00:03:17,990
So I think right now let's be line getting our example to work in the browser.

44
00:03:18,000 --> 00:03:22,200
I think that once we play around with this in the browser we're going to have a much more reasonable

45
00:03:22,200 --> 00:03:24,450
idea of what is going on.

46
00:03:24,960 --> 00:03:31,260
So we're going to take the two types that we made our user type in our route Querrey right here.

47
00:03:31,350 --> 00:03:35,620
We're going to merge them together into a graph Q schema object.

48
00:03:35,790 --> 00:03:38,070
And then we're going to hand that back to the graft.

49
00:03:38,220 --> 00:03:40,150
Middleware inside of our server.

50
00:03:40,180 --> 00:03:41,320
JS file.

51
00:03:41,500 --> 00:03:46,320
So one last little step here and then we'll be able to test this out in our browser.

52
00:03:46,320 --> 00:03:52,320
The first thing we're going to do is import a helper from the graph a library called graph.

53
00:03:52,330 --> 00:04:01,120
Q Well schema graph tools schema takes in a root query and returns a graph schema instance.

54
00:04:01,260 --> 00:04:03,620
So we'll go back down to the bottom of this file.

55
00:04:06,540 --> 00:04:14,140
And I'll say new graph Cuil schema that is the help we just imported or passed to an object that has

56
00:04:14,140 --> 00:04:21,340
one property which is queery and a past that my roots Querrey remember the root query is what we just

57
00:04:21,340 --> 00:04:22,580
defined right here.

58
00:04:22,600 --> 00:04:24,050
So here is the root query.

59
00:04:24,240 --> 00:04:26,800
Pass it directly to Rick Querrey.

60
00:04:26,800 --> 00:04:31,480
Now I want to export the schema that we just created from the schema js file.

61
00:04:31,480 --> 00:04:36,790
I want to make it available to other parts of my application so I can assign the results of this to

62
00:04:36,790 --> 00:04:41,460
module datt exports like so OK.

63
00:04:41,680 --> 00:04:45,890
So now the last step will import this into our server doc js file.

64
00:04:46,270 --> 00:04:47,900
So over and serve server.

65
00:04:48,070 --> 00:04:51,490
Yes I've got the line in here already.

66
00:04:51,760 --> 00:04:53,880
Let's just go through it.

67
00:04:54,370 --> 00:05:03,160
So I'll say conc schema is require from the schema folder find the schema file and it will pass that

68
00:05:03,160 --> 00:05:06,910
schema as an option into our express express graph.

69
00:05:06,910 --> 00:05:07,910
Q Well middleware.

70
00:05:07,950 --> 00:05:11,290
So will say schema with a comma like so.

71
00:05:11,290 --> 00:05:18,940
Note that we're going to make use of E-6 right here because our key and our value has the same same

72
00:05:18,940 --> 00:05:19,830
variable name.

73
00:05:19,870 --> 00:05:25,260
We can pass and just you know by itself and that will be automatically expanded to the schema Kolins

74
00:05:25,290 --> 00:05:27,010
schema like so.

75
00:05:27,630 --> 00:05:28,230
Okay.

76
00:05:28,600 --> 00:05:33,400
So one last step we need to restart our server because we've made some changes to our code base.

77
00:05:33,430 --> 00:05:35,390
So I need to go back over to my terminal.

78
00:05:35,510 --> 00:05:41,160
I'll hit control-C to stop the server and we'll start it back up with node server.

79
00:05:41,170 --> 00:05:45,510
Dot Jay Yes and cool I get listening right here.

80
00:05:45,850 --> 00:05:51,250
If you have any typos in your code at this point in time you'll see some error message pop up in here.

81
00:05:51,250 --> 00:05:56,410
I can almost guarantee you that if you see the error message at this point I can almost guarantee you

82
00:05:56,650 --> 00:05:59,630
they've probably got a mistake with capitalization somewhere.

83
00:05:59,740 --> 00:06:04,310
So you'll want to double check to make sure you've got good capitalization everywhere.

84
00:06:04,370 --> 00:06:06,800
So now we can change back over to our browser.

85
00:06:07,300 --> 00:06:10,960
I'm still at localhost Kulin 4000 slash graph.

86
00:06:10,950 --> 00:06:15,210
Q Well I'm going to refresh the page and.

87
00:06:15,370 --> 00:06:20,400
Now I get my graphical interface pop up on the screen which is exactly what we want.

88
00:06:20,740 --> 00:06:26,470
So let's take a quick break come back and investigate a little bit more about what this graphical thing

89
00:06:26,470 --> 00:06:28,850
is and how we use it in the next section.

