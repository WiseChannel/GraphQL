1
00:00:00,750 --> 00:00:06,900
In the last section we executed our first query that was issued by reata component and we saw our data

2
00:00:06,990 --> 00:00:10,530
appear on the prop's object inside of that component.

3
00:00:10,920 --> 00:00:18,910
The actual data that we're after is located on the this prop's dot data dot songs property.

4
00:00:19,110 --> 00:00:23,070
That's where our list of songs is just to be really clear.

5
00:00:23,070 --> 00:00:28,440
I want to talk a little bit more about why our data is available on the songs property inside of the

6
00:00:28,440 --> 00:00:29,740
data object.

7
00:00:30,090 --> 00:00:35,470
So first off the data object itself is provided by the graphical library.

8
00:00:35,580 --> 00:00:40,890
So down at the bottom here we used the graphic helper the graph tool a helper right here is what creates

9
00:00:40,890 --> 00:00:47,610
that dot data property on our prop's object as far as the actual dot song's property on there.

10
00:00:47,640 --> 00:00:53,460
You'll recall that the Querrey that we wrote said find me a list of songs specifically.

11
00:00:53,460 --> 00:01:00,520
So because we said songs right here the data that was fetched was available on the dot songs property.

12
00:01:00,750 --> 00:01:05,590
If we change this over time to something like Oh yeah give me a list of lyrics or something like that.

13
00:01:05,850 --> 00:01:13,290
I would expect to then get access to the list of lyrics by referring to this props start data dot lyrics

14
00:01:13,380 --> 00:01:14,680
instead of the songs.

15
00:01:14,940 --> 00:01:19,940
But of course I do want songs in this case so I am going to leave it as songs.

16
00:01:20,390 --> 00:01:20,790
OK.

17
00:01:20,850 --> 00:01:26,580
Now that we've got access to our data inside of our component our next step is going to be to render

18
00:01:26,580 --> 00:01:33,480
a list of all the different songs inside of our component will do so by defining a helper method called

19
00:01:33,510 --> 00:01:40,710
maybe something like render songs will generate one react or one GSX tag for every song that was fetched

20
00:01:41,010 --> 00:01:45,500
and then we'll call that helper method from our render method itself.

21
00:01:45,630 --> 00:01:49,470
The first thing I'm going to do is to clean up the console log statement that we have in here because

22
00:01:49,470 --> 00:01:52,960
I really don't like to have dangling tons of logs laying around.

23
00:01:53,490 --> 00:01:59,260
OK then we'll define a helper method called render songs like so.

24
00:01:59,340 --> 00:02:05,970
Again the purpose of this is to iterate over our array of songs and return one GSX tag for every single

25
00:02:05,970 --> 00:02:07,770
song that we fetched.

26
00:02:07,770 --> 00:02:15,200
So I will return the result of this props dot data dot songs.

27
00:02:15,240 --> 00:02:20,510
That's how we get access to the data from the query that we just issued.

28
00:02:20,670 --> 00:02:28,740
We'll then map over that list of songs and say for every song that we fetched I want to return one line

29
00:02:29,100 --> 00:02:29,930
like so.

30
00:02:31,490 --> 00:02:33,140
I know I just did a lot of typing there.

31
00:02:33,140 --> 00:02:36,620
So do make sure that you've got the two return statements.

32
00:02:36,620 --> 00:02:43,190
We're going to return a single lie and the only argument to this function that we care about is the

33
00:02:43,250 --> 00:02:48,870
individual song that we are rendering the live for so inside of the lie.

34
00:02:48,930 --> 00:02:52,510
I think that we just have to print out song that title like so.

35
00:02:52,980 --> 00:02:58,210
So this will print out the title of each individual song inside of an ally.

36
00:02:58,920 --> 00:03:04,410
Now the last thing we'll do is make sure that we call this render songs helper method from inside of

37
00:03:04,410 --> 00:03:06,720
our render method itself.

38
00:03:06,720 --> 00:03:09,480
So I'm going to delete song list right here.

39
00:03:09,490 --> 00:03:10,580
We don't need any more.

40
00:03:10,800 --> 00:03:19,370
And we'll call this dot render songs like so OK let's give this a shot and see how we're doing.

41
00:03:19,400 --> 00:03:23,470
I suspect it might not work exactly the way we expect.

42
00:03:23,480 --> 00:03:27,290
So let's just you know let's just run the thing and see what happens.

43
00:03:28,830 --> 00:03:34,710
Inside my browser I will refresh the documents and I really get a big error message that says cannot

44
00:03:34,710 --> 00:03:38,040
read property map of undefined.

45
00:03:38,100 --> 00:03:44,670
So this is a very big problem that I guarantee you you're going to run up against all the time when

46
00:03:44,670 --> 00:03:45,840
making use of graft.

47
00:03:45,840 --> 00:03:49,580
Well let's read that message again cannot read properly.

48
00:03:49,620 --> 00:03:51,680
Map of undefined.

49
00:03:51,780 --> 00:03:54,650
And the air came from the render songs method.

50
00:03:54,660 --> 00:03:57,790
So clearly the only place that recalling map right now.

51
00:03:57,810 --> 00:03:59,350
So here it is right here.

52
00:03:59,670 --> 00:04:05,020
If we really think about that error message it says cannot read a map of undefined.

53
00:04:05,040 --> 00:04:10,540
In other words this Propst our data that songs returned undefined.

54
00:04:10,590 --> 00:04:11,970
So here's what's happening.

55
00:04:12,360 --> 00:04:13,550
Take a look at this chart right here.

56
00:04:13,560 --> 00:04:14,940
This graph again.

57
00:04:14,940 --> 00:04:20,400
So when our component first appears on the screen the query gets issued.

58
00:04:20,400 --> 00:04:26,500
So our component renders one time without any data having come back from the back end server.

59
00:04:26,520 --> 00:04:32,640
Nothing has come back and the graph tules server yet this stuff Propst out data that songs is undefined

60
00:04:32,700 --> 00:04:41,070
at that point in time only when the query has actually been completed is or is the songs list of songs

61
00:04:41,070 --> 00:04:43,180
going to be available on the data property.

62
00:04:43,260 --> 00:04:46,450
And that's when we can actually show some data on the screen.

63
00:04:46,710 --> 00:04:52,380
So there's going to be a huge chunk of time in here when we have no list of songs and if we try to access

64
00:04:52,380 --> 00:04:57,390
it it's going to be undefined and we're going to get a big error message appear on the screen.

65
00:04:57,390 --> 00:05:01,320
So again this is something that you're going to run into all the time when you're working on your own

66
00:05:01,320 --> 00:05:06,560
projects in every single component where you fetch some data from your graph to server.

67
00:05:06,660 --> 00:05:12,040
You need to be aware of writing code or you need to kind of prepare or make sure you don't.

68
00:05:12,070 --> 00:05:13,530
That's what I'm really trying to say.

69
00:05:13,740 --> 00:05:19,200
You need to make sure that you handle the case in which your data has not yet been fetched.

70
00:05:19,300 --> 00:05:26,630
Biographic well to do so let's take a look at the proper start data object again.

71
00:05:26,640 --> 00:05:32,140
So let's add that console log back in and you say this not prop's Let's see how.

72
00:05:32,160 --> 00:05:36,330
Maybe there's some something in here or something on the prop's object that we might be able to make

73
00:05:36,330 --> 00:05:41,790
use of to help us detect when that data has not yet been fetched.

74
00:05:41,790 --> 00:05:44,050
So let's refresh our document again.

75
00:05:44,460 --> 00:05:48,300
I know that we get the console log or see the error message again but we do get a console log right

76
00:05:48,300 --> 00:05:49,230
above it.

77
00:05:49,620 --> 00:05:54,070
So you'll notice on the data property there is a loading flag on here.

78
00:05:54,120 --> 00:05:55,350
So loading means.

79
00:05:55,470 --> 00:05:57,710
Is this request still pending.

80
00:05:57,750 --> 00:06:01,420
Are we still in the process of fetching data from the back end.

81
00:06:01,500 --> 00:06:04,610
And in this case yeah the request was just made.

82
00:06:04,650 --> 00:06:11,190
We are still trying to fetch some data from the backend server so we can look at this loading flag right

83
00:06:11,190 --> 00:06:16,500
here to figure out whether or not we have actually fetched all the data we need from our back end which

84
00:06:16,500 --> 00:06:23,130
is a great way to redirect our component in some fashion or return something else maybe when our data

85
00:06:23,160 --> 00:06:30,270
has not yet been fetched in practice we can really solve this with just a single line of code inside

86
00:06:30,270 --> 00:06:35,490
the render method will say if this stopped dot data loading.

87
00:06:36,150 --> 00:06:41,100
So if we are still in the process of loading then don't try to render the whole component.

88
00:06:41,100 --> 00:06:43,100
Don't try to render a list of songs.

89
00:06:43,290 --> 00:06:50,320
Let's just return a div that says Loading.

90
00:06:50,500 --> 00:06:55,460
Like so I'm going to zoom out for a second so you can see the whole line.

91
00:06:55,690 --> 00:07:00,550
So the thought process here is if we're loading if we're still fetching this query.

92
00:07:00,550 --> 00:07:02,820
This query is still pending on the network.

93
00:07:02,870 --> 00:07:04,460
You know we're still waiting for this thing.

94
00:07:04,510 --> 00:07:07,090
Then don't try to render everything inside the component.

95
00:07:07,090 --> 00:07:10,330
Don't try to access the list of songs that don't yet exist.

96
00:07:10,330 --> 00:07:13,370
Just show something that says loading instead.

97
00:07:13,810 --> 00:07:16,450
So let's now test this out and see how we're doing.

98
00:07:16,960 --> 00:07:21,110
We go back to the browser refresh the page and.

99
00:07:21,340 --> 00:07:21,880
All right.

100
00:07:21,880 --> 00:07:22,680
Looks like we got it.

101
00:07:22,690 --> 00:07:25,920
We at least have a song appearing on the screen.

102
00:07:26,230 --> 00:07:28,350
Now yes we do have a big warning message here.

103
00:07:28,390 --> 00:07:29,930
We'll take care of that in just a second.

104
00:07:30,040 --> 00:07:33,120
But the important thing to note is hey we've got some data on the screen.

105
00:07:33,120 --> 00:07:33,790
Hot dog.

106
00:07:33,820 --> 00:07:34,930
We're making some progress.

107
00:07:34,930 --> 00:07:36,580
Very good.

108
00:07:36,580 --> 00:07:42,310
So we still have a couple of issues to take care of this big warning message in here is you know around

109
00:07:42,790 --> 00:07:47,890
rendering a list of components which is what we're doing right now and we're not providing a key property.

110
00:07:47,890 --> 00:07:50,690
This is going back to basic react stuff right here.

111
00:07:50,710 --> 00:07:55,240
Let's take care of that and look at a couple other issues that we might have inside of our component

112
00:07:55,570 --> 00:07:56,580
in the next section.

