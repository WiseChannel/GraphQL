1
00:00:00,610 --> 00:00:04,960
We've got our sign up log out and log in mutations put together.

2
00:00:05,110 --> 00:00:11,460
But again we really don't have any useful way of figuring out whether or not the current user is authenticated.

3
00:00:11,500 --> 00:00:16,240
Once we start moving over to the client side of this application we're very soon going to have to figure

4
00:00:16,240 --> 00:00:21,490
out whether or not the user is authenticated because if they try to visit some route that requires the

5
00:00:21,490 --> 00:00:26,410
user to be logged in we want to be able to ask the question hey is this person actually logged in.

6
00:00:26,410 --> 00:00:30,880
Because if they're not we need to kick them out to somewhere else inside of our application and make

7
00:00:30,880 --> 00:00:34,890
sure that they first log in before they go to this protected route.

8
00:00:34,960 --> 00:00:40,210
So to be able to make the determination of whether or not we are currently logged into our application

9
00:00:40,690 --> 00:00:44,950
I propose that we add a field to our root query type.

10
00:00:44,950 --> 00:00:49,050
So here is my route query type doc js file right here.

11
00:00:49,300 --> 00:00:55,750
I'm going to suggest that we add a field to this object of maybe something just like user or current

12
00:00:55,780 --> 00:01:03,820
user and we'll just return the currently authenticated user for the given request object if the request

13
00:01:03,820 --> 00:01:05,760
object does contain a user.

14
00:01:05,770 --> 00:01:10,980
And remember that request object user property is populated automatically by passport.

15
00:01:11,230 --> 00:01:15,300
Then will the return of the user successfully to the client side.

16
00:01:15,310 --> 00:01:19,190
Otherwise if there is no user currently logged in will return nil.

17
00:01:19,450 --> 00:01:24,700
So we can use that difference between the existence of a user and know to figure out whether or not

18
00:01:24,700 --> 00:01:29,070
the user is currently authenticated on the client side of our application.

19
00:01:29,650 --> 00:01:33,720
So it's give us a shot I'm inside of the required type file.

20
00:01:33,820 --> 00:01:37,650
We're going to add on a new field to this thing called user.

21
00:01:37,660 --> 00:01:42,490
We can also call it something like current user to make sure that's really clear that this is the currently

22
00:01:42,490 --> 00:01:43,780
logged in user.

23
00:01:43,930 --> 00:01:47,340
But I think for right now just calling it user would make plenty of sense.

24
00:01:48,930 --> 00:01:52,360
We're going to return a user type from this field right here.

25
00:01:52,380 --> 00:02:01,360
So we do need to make sure to require in user type at the top so require user type user type.

26
00:02:02,430 --> 00:02:08,560
Then we'll say OK whenever someone asks for the current user We're going to return a user type and then

27
00:02:08,560 --> 00:02:13,330
we need to instruct graph Cuil on exactly how to return that current user.

28
00:02:13,650 --> 00:02:24,590
So we will define our resolve function which takes in our parent value args and request object.

29
00:02:24,690 --> 00:02:30,960
Now as we've seen the request object gets some properties automatically placed on it by passport whenever

30
00:02:30,960 --> 00:02:32,560
we authenticate a user.

31
00:02:32,730 --> 00:02:38,710
So that's passport kind of working behind the scenes to interact with the request object automatically.

32
00:02:39,030 --> 00:02:46,500
So if the user is authenticated when they access this graph property right here the request object should

33
00:02:46,500 --> 00:02:52,950
have a record user property assigned to it if the user is not currently signed in.

34
00:02:52,980 --> 00:02:58,890
Than recked don't use a write will be undefined witchcraft QOL is going to translate into a value of

35
00:02:58,890 --> 00:02:59,410
No.

36
00:02:59,430 --> 00:03:04,680
When it responds to the front end of our application Don't forget that we do have to return this value

37
00:03:04,680 --> 00:03:05,780
as well.

38
00:03:05,820 --> 00:03:11,230
So in total the entire result function right here to get the current user is just going to be wrecked

39
00:03:11,320 --> 00:03:15,980
user like so there's really nothing else to this.

40
00:03:15,980 --> 00:03:22,000
You know it's pretty straightforward if the user is signed in great return them otherwise return undefined

41
00:03:22,000 --> 00:03:23,040
or return no.

42
00:03:23,140 --> 00:03:28,270
And that's going to be our ability to decide on the front end whether or not the user is authenticated.

43
00:03:28,270 --> 00:03:35,540
So I think you know what comes next who are going to give this a shot out inside of graphical it can

44
00:03:36,300 --> 00:03:42,380
so I can start off by refreshing graphical clearing out the existing text in there.

45
00:03:42,380 --> 00:03:48,290
The first thing I want to do is to make sure that I am currently logged in as a valid user so I'm going

46
00:03:48,290 --> 00:03:52,430
to write out a mutation to sign myself into the application.

47
00:03:52,880 --> 00:04:00,610
Well call the log in mutation and provide a valid email and a valid password as well.

48
00:04:03,610 --> 00:04:07,990
And then we'll ask for the e-mail of the user that we're now identified as.

49
00:04:08,120 --> 00:04:09,360
So run this.

50
00:04:09,880 --> 00:04:16,110
And now in theory I am signed into our application as test at test dot com.

51
00:04:16,180 --> 00:04:25,150
So if I now remove this mutation and instead write a query asking for the current user when I'll ask

52
00:04:25,150 --> 00:04:27,070
for the email of the current user.

53
00:04:27,250 --> 00:04:34,020
If I am truly signed in to my application I should get back an email of test at test dot com.

54
00:04:34,270 --> 00:04:39,490
So I'll run this and I'd get back in e-mail test at test dot com.

55
00:04:39,520 --> 00:04:43,320
So now let's test the case in which our user is not authenticated.

56
00:04:43,600 --> 00:04:48,910
So first we need to sign out of our application and we'll do that by running the log out mutation that

57
00:04:48,910 --> 00:04:50,960
we just wrote wrote.

58
00:04:50,980 --> 00:04:59,230
So get rid of the query We'll update because to be our mutation all log out the current user will ask

59
00:04:59,230 --> 00:05:02,340
for the email of the user that we just logged out.

60
00:05:03,070 --> 00:05:04,160
So let's run this.

61
00:05:04,260 --> 00:05:04,700
OK.

62
00:05:04,720 --> 00:05:05,260
Looks good.

63
00:05:05,260 --> 00:05:07,970
I should now be logged out of my application.

64
00:05:08,170 --> 00:05:15,370
So now if I run the same query again where I ask for my current user and I ask for their e-mail we can

65
00:05:15,370 --> 00:05:19,740
run this and we get back a user of no.

66
00:05:20,050 --> 00:05:23,230
So everything looks like it's working the way we expect at this point in time.

67
00:05:23,380 --> 00:05:30,010
We can sign up the user we can log in we can log out and we have some means to figure out whether or

68
00:05:30,010 --> 00:05:32,690
not our current user is authenticated.

69
00:05:32,980 --> 00:05:38,680
So this is really going to be our check rate year for deciding whether or not our user has access to

70
00:05:38,680 --> 00:05:46,010
different routes inside of the client side of our application that require authentication OK.

71
00:05:46,030 --> 00:05:47,620
So this is looking pretty darn good.

72
00:05:47,620 --> 00:05:51,730
I think that we've got just about all the different tools that we need to start working on the client

73
00:05:51,730 --> 00:05:52,980
side of our app.

74
00:05:53,050 --> 00:05:56,800
So let's continue in the next section and we're going to start thinking about how to put together the

75
00:05:56,800 --> 00:05:58,730
re-act side of our application.

