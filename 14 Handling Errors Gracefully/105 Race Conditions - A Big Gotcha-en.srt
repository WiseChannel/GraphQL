1
00:00:00,850 --> 00:00:05,360
Both are log in form and or sign up form are in a really good spot.

2
00:00:05,380 --> 00:00:12,730
At this point in time in both forms users can enter some details click the button and then are back

3
00:00:12,730 --> 00:00:16,500
in server then considers the user to be authenticated.

4
00:00:16,510 --> 00:00:21,880
So our application isn't a pretty good spot right now and it's time for us to move onto the home stretch

5
00:00:22,180 --> 00:00:28,300
which is going to be it to create a dashboard component which should only be visible to users if they

6
00:00:28,300 --> 00:00:29,660
are authenticated.

7
00:00:29,890 --> 00:00:31,740
And so that last part is really key.

8
00:00:31,780 --> 00:00:36,760
We want to make sure that if a user tries to visit the dashboard component when they have not signed

9
00:00:36,760 --> 00:00:40,930
in ahead of time we should redirect them back to the log in form.

10
00:00:40,930 --> 00:00:45,770
So really we just want her application to behave like a normal web app if you're not signed in.

11
00:00:45,790 --> 00:00:49,600
You can't access the internals of the web application.

12
00:00:49,840 --> 00:00:54,880
I want to take a little bit of time to talk to you a little bit about how we had kind of been planning

13
00:00:54,880 --> 00:00:59,710
on doing this and then we're going to talk about a little bit of a wrench that is going to be thrown

14
00:00:59,710 --> 00:01:01,810
into what our plan had been.

15
00:01:02,800 --> 00:01:07,420
So I'm going to open up my code editor and I have my logon form open right now.

16
00:01:07,450 --> 00:01:16,150
So I'm in loggin form that G-S if you recall we had kind of been thinking that after running our mutation

17
00:01:16,150 --> 00:01:23,110
to log a user in maybe we would add on a dot then statement to this thing and say something like OK

18
00:01:23,200 --> 00:01:29,980
after we have random mutation to sign a user in let's somehow make use of re-act router and navigate

19
00:01:29,980 --> 00:01:35,590
the user over toward dashboard component and then somewhere along the lines there maybe the dashboard

20
00:01:35,590 --> 00:01:41,500
component itself would make sure that the user who is viewing it is authenticated otherwise it would

21
00:01:41,500 --> 00:01:43,610
kick them back to this log and form.

22
00:01:43,630 --> 00:01:46,330
So this had kind of been our plan right here.

23
00:01:46,530 --> 00:01:52,030
I mean it took this line of code out and we're going to look at that plan in diagram form.

24
00:01:52,160 --> 00:01:54,870
OK so let's look at the diagram really quick.

25
00:01:54,870 --> 00:01:56,950
So this is going to call our offload.

26
00:01:56,970 --> 00:02:02,280
In a perfect world this is what we would really like to have happen.

27
00:02:02,310 --> 00:02:08,810
So the thought process here is that we will run our loggin mutation that would reach out to our backend

28
00:02:08,830 --> 00:02:09,570
server.

29
00:02:09,690 --> 00:02:13,290
It would log the user and the users cookie would be set.

30
00:02:13,530 --> 00:02:19,220
Then after the mutation successfully runs we add it in that refence queries statement.

31
00:02:19,260 --> 00:02:20,650
We were just looking at it.

32
00:02:20,820 --> 00:02:27,200
So here's re-offense queries right here where we refreshed the current user so we refreshed the current

33
00:02:27,200 --> 00:02:32,900
user and that establishes our current authentication state as far as our front end is concerned.

34
00:02:34,220 --> 00:02:39,890
Then we were thinking OK at that point in time we'll chain on a dot then and forcibly redirect the user

35
00:02:39,950 --> 00:02:41,800
over to the dashboard component.

36
00:02:41,900 --> 00:02:47,810
And then finally the dashboard would ensure that the user is authenticated Once the user comes to it.

37
00:02:47,900 --> 00:02:52,820
The thought process there is that a user might come to the dashboard either through the log in form

38
00:02:53,150 --> 00:02:56,700
or by attempting to navigate directly to the dashboard.

39
00:02:56,780 --> 00:03:02,630
And if the user navigates directly into the dashboard we would want to make sure that the user is authenticated

40
00:03:02,630 --> 00:03:03,850
before they get there.

41
00:03:03,860 --> 00:03:08,430
So that's why we are putting authentication or ensure in the dashboard.

42
00:03:08,510 --> 00:03:14,440
Let me rephrase that making sure that the dashboard is in charge of ensuring that the user is authenticated.

43
00:03:14,690 --> 00:03:19,450
So at the end of the day if the user was authenticated when they arrived on the dashboard great.

44
00:03:19,550 --> 00:03:20,660
They can stay there.

45
00:03:20,690 --> 00:03:26,270
However if the dashboard determines that the user is not authenticated look at it we're going to take

46
00:03:26,270 --> 00:03:30,210
them back out to the log in and they have to make sure they log in ahead of time.

47
00:03:31,580 --> 00:03:31,840
OK.

48
00:03:31,850 --> 00:03:38,100
So as you might imagine this is the perfect world and we do not live in a perfect world at all.

49
00:03:38,100 --> 00:03:45,020
We live in a very imperfect world a world where things sometimes don't really function the way we expect.

50
00:03:45,160 --> 00:03:50,850
Even though every step that I've laid out here has really seemed quite reasonable quite reasonable.

51
00:03:50,980 --> 00:03:54,870
I mean if I was looking at the series of steps right here I'd be thinking OK.

52
00:03:54,880 --> 00:03:55,170
Yeah.

53
00:03:55,180 --> 00:03:55,650
That's great.

54
00:03:55,650 --> 00:03:58,120
Let's do it right now let's code this thing up.

55
00:03:58,630 --> 00:04:00,730
So of course this is an imperfect world.

56
00:04:00,730 --> 00:04:06,730
And so this is not exactly how authentication is going to come together inside of our application.

57
00:04:06,730 --> 00:04:10,490
So this is a little bit of a awkward spot in the world of Apollo.

58
00:04:10,510 --> 00:04:14,020
So we're going to you know work through this thing and figure out what the challenges are.

59
00:04:14,290 --> 00:04:18,370
But the good news is that even though there are a couple of challenges it's going to allow us to really

60
00:04:18,370 --> 00:04:22,250
figure out a lot more about how Apollo internally works.

61
00:04:22,360 --> 00:04:27,000
And we're also going to learn a little bit more about re-act along the way as well look at.

62
00:04:27,130 --> 00:04:30,670
So let's look at what the offload is in reality.

63
00:04:30,680 --> 00:04:37,060
So this is how the authentication would flow if we wired up the flow as we just were looking at in the

64
00:04:37,060 --> 00:04:39,800
last diagram this is what would really happen.

65
00:04:39,820 --> 00:04:44,000
So our log in nutation would run and then immediately right here.

66
00:04:44,020 --> 00:04:44,880
The second step.

67
00:04:44,920 --> 00:04:50,440
This is where there is a critical breakdown this is where things start to really go off the tracks and

68
00:04:50,440 --> 00:04:53,440
not function in the way that we expect.

69
00:04:53,440 --> 00:05:00,880
So after the mutation runs we had been saying that we would chain on a dot then statement to the promise

70
00:05:00,880 --> 00:05:06,670
that has returned from this Propst not mutate and the assumption there was that that promise would be

71
00:05:06,730 --> 00:05:10,860
only resolved after the current user was fetched.

72
00:05:11,050 --> 00:05:14,410
And unfortunately that's not quite the case.

73
00:05:14,410 --> 00:05:18,740
So here's what really happens after the loggin nutation runs.

74
00:05:18,970 --> 00:05:24,410
Any dot then statement that is chained onto that promise is immediately executed.

75
00:05:24,550 --> 00:05:29,200
And simultaneously we researched the current user Querrey.

76
00:05:29,260 --> 00:05:34,870
So in other words the big catch here the big hang up is that the promise does not quite work in the

77
00:05:34,870 --> 00:05:36,190
way that you would expect.

78
00:05:36,460 --> 00:05:41,620
Personally the way that I would really want mutate to work great here I would want the promise that

79
00:05:41,620 --> 00:05:49,630
is returned to only resolve after all after both the mutation and these queries that are associated

80
00:05:49,720 --> 00:05:52,300
on refits queries right here have been resolved.

81
00:05:52,450 --> 00:05:57,610
That would really be perfect world in my eyes because that's really describing the entire asynchronous

82
00:05:57,610 --> 00:06:04,150
operation that's being encompassed by this mutation like hey Garone this mutation re-offense these queries.

83
00:06:04,150 --> 00:06:05,820
Let me know when you're done.

84
00:06:06,340 --> 00:06:09,300
But again that is not how the thing actually works.

85
00:06:09,310 --> 00:06:15,640
So after the mutation runs if we change on a and then the user would instantly be redirected over to

86
00:06:15,640 --> 00:06:21,960
the dashboard and we would also start the request to fetch our current user.

87
00:06:21,970 --> 00:06:24,310
Now let's talk about exactly why that's a bad thing.

88
00:06:25,910 --> 00:06:31,460
Redirecting our user over to the dashboard is a near instantaneous operation.

89
00:06:31,460 --> 00:06:38,880
We're talking about micro-seconds milliseconds or micro-seconds a very fast transition speed.

90
00:06:39,230 --> 00:06:45,710
However prefetching the current user that is a forced network request we are always going to reach out

91
00:06:45,710 --> 00:06:50,840
from our re-act application to our back end server and try to figure out whether or not the user is

92
00:06:50,840 --> 00:06:53,000
currently authenticated.

93
00:06:53,000 --> 00:06:58,160
This process over here this is something that can take anywhere from I don't know five milliseconds

94
00:06:58,160 --> 00:06:59,890
to five seconds.

95
00:07:00,020 --> 00:07:02,660
It can be wildly variable and speed.

96
00:07:02,900 --> 00:07:08,750
And so what we're really dealing with right now is an order of operations air or a race condition.

97
00:07:08,780 --> 00:07:14,270
So because we are redirecting the user to the dashboard at the same instant that we are attempting to

98
00:07:14,310 --> 00:07:19,530
re-offense the current user or the redirect is always going to kick in first.

99
00:07:19,550 --> 00:07:22,470
So we are instantly going to go over to the dashboard.

100
00:07:22,730 --> 00:07:28,280
But as far as our application is concerned we don't know if the user is currently logged in and we don't

101
00:07:28,280 --> 00:07:34,820
really have any super reasonable way of delaying the dashboard to decide to redirect the user until

102
00:07:34,820 --> 00:07:36,500
the refunds query is complete.

103
00:07:36,500 --> 00:07:38,660
We don't really have the ability to do that.

104
00:07:38,720 --> 00:07:45,140
So if we coded up this application according to this flow right here we would always get the same exact

105
00:07:45,140 --> 00:07:51,960
result which would be logged user logs and successfully we redirect the user over to the dashboard.

106
00:07:52,130 --> 00:07:54,870
The dashboard says hey you're not logged in get out here.

107
00:07:54,920 --> 00:08:02,240
It takes us back to the log in form and then milliseconds later the current user gets refreshed refreshed

108
00:08:02,480 --> 00:08:04,430
and that updates our application.

109
00:08:04,430 --> 00:08:08,970
And at that point time we're kind of left holding the bag sitting there like well we're looking at the

110
00:08:09,080 --> 00:08:09,770
logging.

111
00:08:09,800 --> 00:08:12,820
But I'm logged in what what went wrong here.

112
00:08:12,890 --> 00:08:17,810
And so that's what a big issue with the auth flow in reality is inside of our application.

113
00:08:17,840 --> 00:08:24,560
It all revolves around the fact that we don't have a super good way to figure out exactly when the whole

114
00:08:24,560 --> 00:08:30,000
mutation and Rifat of the current user query is all complete.

115
00:08:30,220 --> 00:08:32,740
So that's what we're kind of up against here.

116
00:08:32,750 --> 00:08:34,900
That's what we have to deal with.

117
00:08:34,920 --> 00:08:40,720
Again this is in my opinion a little bit of a rough edge around the Apollo in all of the research I've

118
00:08:40,720 --> 00:08:42,020
done.

119
00:08:42,130 --> 00:08:48,640
I really found that it really appears the Apollo team is not quite happy with the refashioning mechanics

120
00:08:48,640 --> 00:08:49,310
right now.

121
00:08:49,420 --> 00:08:55,180
And so I I kind of would expect to see this behavior maybe change at some point in the future.

122
00:08:55,240 --> 00:08:56,440
I don't know when that might be.

123
00:08:56,470 --> 00:08:58,460
And I really don't know if it would happen.

124
00:08:58,510 --> 00:09:04,960
And so the best workaround for this is to just understand how the mutation works how the research works

125
00:09:05,050 --> 00:09:10,380
and to write up some code that's going to work around it reliably 100 percent of the time.

126
00:09:10,450 --> 00:09:14,170
And so that's the that's the solution we're going to take we're going to figure out some work around

127
00:09:14,170 --> 00:09:20,440
here to successfully deal with the fact that while we're looking at this form we can't really hand or

128
00:09:20,440 --> 00:09:27,370
we can't really rely upon this request right here to change our authentication state.

129
00:09:27,560 --> 00:09:32,960
So before we talk about what the solution is I don't want this section around too long so let's take

130
00:09:32,960 --> 00:09:37,550
a quick break and we'll come back and we'll talk about exactly how we're going to address this whole

131
00:09:37,550 --> 00:09:40,730
situation inside of our log in Forum.

132
00:09:40,740 --> 00:09:43,640
So a quick break come back and figure this thing out.

