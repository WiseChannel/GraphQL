1
00:00:00,950 --> 00:00:05,190
In the last section we put together some boilerplate for our song detail component.

2
00:00:05,340 --> 00:00:11,550
I want to now focus on thinking about how we can get some details about the currently viewed song into

3
00:00:11,550 --> 00:00:13,730
this song detail a component.

4
00:00:13,750 --> 00:00:19,260
So remember song detail needs to show the title of the currently viewed song and the currently viewed

5
00:00:19,260 --> 00:00:22,140
song is reflected inside the u r l.

6
00:00:22,530 --> 00:00:27,610
So we need to think a little bit about how we're going to make equerry for a very particular song.

7
00:00:27,960 --> 00:00:33,210
Let's start off by looking at graphical and checking out our documentation to see if we can query about

8
00:00:33,240 --> 00:00:35,160
a very particular song.

9
00:00:35,670 --> 00:00:40,420
So I'm going to open up graphical and I'm going to open up my docs panel on the right hand side.

10
00:00:40,500 --> 00:00:45,390
So you might be thinking Well Stephen Hey no problem we've been getting our list of songs all the time

11
00:00:45,420 --> 00:00:47,220
in this application so far.

12
00:00:47,220 --> 00:00:51,630
We can just go through our list of songs and pick out the one with the idea that we really care about

13
00:00:52,080 --> 00:00:55,190
by using that song's reference so we've been making use of.

14
00:00:55,560 --> 00:00:57,050
Oh yes that's definitely true.

15
00:00:57,060 --> 00:01:03,150
But remember one of the big promises around graph to L as a solution for fetching data.

16
00:01:03,300 --> 00:01:08,340
The idea behind it is that we don't have to overfat the data for our application.

17
00:01:08,340 --> 00:01:14,340
So if our user wants to look at just one very particular song I only want to fetch the data related

18
00:01:14,340 --> 00:01:20,180
to that one particular song and I want to fetch the entire list of songs inside my application.

19
00:01:20,370 --> 00:01:26,310
So you'll notice that my root query right here has another query attached to it where we can ask for

20
00:01:26,310 --> 00:01:30,720
a song by providing it the ID of a very particular song.

21
00:01:31,080 --> 00:01:36,960
So if we pass in or excuse me if we make a query to song and we pass in just here's the idea of the

22
00:01:36,960 --> 00:01:38,150
one I'm trying to look for.

23
00:01:38,250 --> 00:01:43,200
We'll get back some details about that singular song just by itself.

24
00:01:43,200 --> 00:01:45,020
So I think that's going to be our approach here.

25
00:01:45,030 --> 00:01:51,450
We're going to somehow take the idea of the song that we're looking at and reflected inside this queery

26
00:01:51,780 --> 00:01:55,130
get the result back and show it inside the component.

27
00:01:55,170 --> 00:01:59,730
Let's first start off by writing this curry out inside of graphical just to make sure we've got a pretty

28
00:01:59,730 --> 00:02:04,340
good idea of what the query is going to look like and then we'll move it over to our code.

29
00:02:04,560 --> 00:02:06,820
So going to close a side panel now.

30
00:02:07,170 --> 00:02:12,980
The first thing we have to do is make sure that we know the idea of a valid song inside of our project.

31
00:02:13,170 --> 00:02:17,520
So I don't know any of the ideas of top my head because there are really long strings of characters

32
00:02:17,910 --> 00:02:23,720
so I'm going to write on a query that's going to return a list of all the different songs we have available.

33
00:02:23,770 --> 00:02:28,260
I'm going to say Give me my list of songs and tell me about the ideas for each of them.

34
00:02:28,550 --> 00:02:28,880
OK.

35
00:02:28,890 --> 00:02:31,290
So here's the idea of each of our songs.

36
00:02:31,290 --> 00:02:36,040
I'm going to pick one song at random and say I'm going to go with the top one right here.

37
00:02:36,060 --> 00:02:38,030
I'm going to copy the ID.

38
00:02:38,430 --> 00:02:43,830
Next I'm going to remove the existing query we have and now we're going to write the query to try to

39
00:02:43,830 --> 00:02:46,380
get at some very particular song.

40
00:02:46,500 --> 00:02:49,520
Really this song right here the one with this idea.

41
00:02:50,160 --> 00:02:55,560
Also remember that because we don't really know the idea of the song that we want to get access to ahead

42
00:02:55,560 --> 00:02:59,010
of time you know it could be any one of these ideas right here.

43
00:02:59,160 --> 00:03:05,550
I'm going to decide to write a named query that takes a query variable as an argument.

44
00:03:05,730 --> 00:03:11,460
So we will be able to specify the idea of the song that we're trying to fetch at runtime as opposed

45
00:03:11,460 --> 00:03:17,820
to just hard coding some ID into the query and saying oh yeah always fetch this one right here because

46
00:03:17,820 --> 00:03:19,820
of course I don't want to always fetch this one.

47
00:03:19,860 --> 00:03:24,040
I want to get some different ones so I need to specify that at runtime.

48
00:03:24,540 --> 00:03:27,970
So I'm going to start by first defining a query variable.

49
00:03:28,260 --> 00:03:37,200
I mean to say OK heres an ID and I'll paste the idea of the song that I'm getting at no notice so he

50
00:03:37,200 --> 00:03:38,830
neatly get the red squiggly line.

51
00:03:39,030 --> 00:03:39,500
Yeah.

52
00:03:39,540 --> 00:03:42,410
It's just saying look you're not using this query variable yet.

53
00:03:42,420 --> 00:03:44,240
Are you sure you want to have it defined.

54
00:03:44,250 --> 00:03:48,070
We're going to use in just a second so that air that we're seen is totally fine.

55
00:03:48,440 --> 00:03:54,720
OK so now we're going to write out our query writing out named queries where we accept query variables

56
00:03:54,960 --> 00:03:59,320
is the exact same syntax that we've been using for mutations.

57
00:03:59,520 --> 00:04:05,400
So remember with mutations where we took in query variables we'd been saying like mutation and then

58
00:04:05,760 --> 00:04:10,920
add song and then the name of the query variable and its type.

59
00:04:10,920 --> 00:04:15,110
So we're going to do something nearly identical for a named query.

60
00:04:15,420 --> 00:04:17,460
We're going to use the query keyword.

61
00:04:17,790 --> 00:04:22,250
I'm going to name the query so I mean it is just arbitrarily call it song query.

62
00:04:22,260 --> 00:04:25,430
Again there is no real good.

63
00:04:25,890 --> 00:04:30,410
There's no enforced requirement is what I mean to say about the name of the song Querrey right here.

64
00:04:30,420 --> 00:04:32,590
We can name it anything we like.

65
00:04:32,760 --> 00:04:41,080
We can say fecche song or find one song fine song by id whatever you think is appropriate.

66
00:04:41,160 --> 00:04:47,400
Next we'll tell it that when ever it gets called it should expect to receive an ID and I'm going to

67
00:04:47,430 --> 00:04:55,950
name it id and then we have to annotate the type of this incoming piece of data right here.

68
00:04:55,950 --> 00:04:59,980
So I have to say OK you should be expecting to get an ID as an argument.

69
00:05:00,160 --> 00:05:03,240
And when it comes in make sure that it is of type blank.

70
00:05:03,280 --> 00:05:09,400
So like a number or an ID type or a string type all those calling and primitive types that weve been

71
00:05:09,400 --> 00:05:14,710
making use of in this case I want to make sure that an ID comes in.

72
00:05:14,710 --> 00:05:19,110
And I also want to make sure that a user does provide an ID.

73
00:05:19,120 --> 00:05:25,720
I want to make a inforced requirement and I want to say look if you're trying to make a query to a song

74
00:05:25,720 --> 00:05:31,270
here you got to tell me the idea of the song you're trying to that you can't say oh go find this song

75
00:05:31,300 --> 00:05:33,160
but I'm not going to tell you which one.

76
00:05:33,160 --> 00:05:35,030
That doesn't really make any sense.

77
00:05:35,050 --> 00:05:41,260
So we're going to enforce some validation to ensure that an ID is always provided and will do so by

78
00:05:41,260 --> 00:05:44,020
putting an exclamation mark in like so.

79
00:05:44,530 --> 00:05:51,100
So the exclamation mark right here says yep this is going to be of type ID and it must be provided.

80
00:05:51,250 --> 00:05:56,290
So the exclamation mark means you have to provide this argument.

81
00:05:56,290 --> 00:06:00,590
Now we can open up our Clarie and write out the actual query.

82
00:06:01,420 --> 00:06:05,950
So we want to look at the song field on our route query object.

83
00:06:05,950 --> 00:06:10,010
I know that I want to use song here because we just saw it inside of our documentation.

84
00:06:10,240 --> 00:06:11,810
Here's my route query type.

85
00:06:11,890 --> 00:06:22,290
And I know that I can query for a very particular song and we want to find the song with an ID of ID.

86
00:06:23,040 --> 00:06:26,810
So again we've got the same kind of pattern of arguments here.

87
00:06:26,850 --> 00:06:31,440
And yeah we've spoken at great length about how it's just a little bit awkward how they're flipped in

88
00:06:31,440 --> 00:06:32,100
order.

89
00:06:32,220 --> 00:06:37,000
So remember the top one says expect to get a variable called ID.

90
00:06:37,260 --> 00:06:41,130
The second field says here's the type of that ID when it comes in.

91
00:06:41,160 --> 00:06:44,670
Then the third one is hey you should receive an ID.

92
00:06:44,730 --> 00:06:46,290
And here's what it should be

93
00:06:49,320 --> 00:06:51,580
then for each song will say just do it.

94
00:06:51,600 --> 00:06:52,420
Just give me the title.

95
00:06:52,440 --> 00:06:53,290
I'm happy with that.

96
00:06:53,340 --> 00:06:58,500
And actually just for Eric keeping a record keeping let's ask for the ideas well just to verify that

97
00:06:58,500 --> 00:06:59,820
we got the correct one.

98
00:06:59,850 --> 00:07:05,210
So we'll compare the idea of the song we fetch with the queery variable that we passed in as well.

99
00:07:05,550 --> 00:07:06,280
OK.

100
00:07:06,780 --> 00:07:08,390
We're about ready to test this out.

101
00:07:08,510 --> 00:07:15,570
So I'm going to run it I get an idea of 5 8 9 5 8 9 200 200 on the end.

102
00:07:15,600 --> 00:07:16,680
So it looks good.

103
00:07:16,830 --> 00:07:20,520
And I've got a title of coffee couple perfect.

104
00:07:20,550 --> 00:07:25,500
So this looks like the query that we're going to want to use inside of our song detail a component to

105
00:07:25,500 --> 00:07:27,930
find a very particular song.

106
00:07:28,320 --> 00:07:37,540
So I'm going to copy this right here and I'm going to move it over to my song detail component OK.

107
00:07:38,050 --> 00:07:44,320
Now again if we wanted to we absolutely could create a separate query file.

108
00:07:44,650 --> 00:07:47,440
It's not a hard requirement.

109
00:07:47,440 --> 00:07:48,700
You don't have to.

110
00:07:48,700 --> 00:07:52,470
It's really up to personal preference on projects I work on.

111
00:07:52,510 --> 00:07:55,590
Yes I usually end up creating a separate query file.

112
00:07:55,630 --> 00:08:00,860
I think that this time around we will make a separate query file to how is this query just kind of following

113
00:08:00,880 --> 00:08:06,250
nice precedent here saying yeah we're going to put all of our queries into separate locations so they're

114
00:08:06,250 --> 00:08:07,980
nicely organized.

115
00:08:08,140 --> 00:08:16,360
So inside in my queries directory I'll create a new file called fetch song Dungey us do notice that

116
00:08:16,360 --> 00:08:20,360
we've now got two very similarly named queries put together.

117
00:08:20,380 --> 00:08:23,450
We have fetched song and fetch songs plural.

118
00:08:23,650 --> 00:08:29,620
It would be kind of nice if we had a little bit better terminology here to differentiate between the

119
00:08:29,620 --> 00:08:30,920
two files.

120
00:08:30,940 --> 00:08:35,650
Right now we're really just relying on the presence of an s right there which is a very easy typo to

121
00:08:35,650 --> 00:08:36,040
make.

122
00:08:36,040 --> 00:08:41,020
So if you feel like if you rename you want to be like songs index or.

123
00:08:41,110 --> 00:08:42,680
And then Song get.

124
00:08:42,790 --> 00:08:45,880
That might be a little bit more clear about what's going on.

125
00:08:46,110 --> 00:08:48,400
Or we know we could do fecche song list.

126
00:08:48,400 --> 00:08:50,090
That would be pretty good as well.

127
00:08:50,560 --> 00:08:52,350
For me I'm just going to stick with that song.

128
00:08:52,360 --> 00:08:54,980
I feel pretty comfortable with it.

129
00:08:55,110 --> 00:08:57,230
I'll got so remember how we create a query.

130
00:08:57,370 --> 00:09:03,790
We first import the GQ l library from graft well tag.

131
00:09:04,270 --> 00:09:08,120
Then we export defaults and make the actual equerry.

132
00:09:08,200 --> 00:09:08,920
So we'll say.

133
00:09:08,920 --> 00:09:12,380
GQ l will place the tactics again.

134
00:09:12,430 --> 00:09:13,660
I can't repeat it enough.

135
00:09:13,660 --> 00:09:18,610
Make sure it's back Tich make sure it's not a single quote or a double quote and then we'll just paste

136
00:09:18,610 --> 00:09:20,810
in the query that we were just working on.

137
00:09:20,830 --> 00:09:23,990
Like so ok.

138
00:09:24,160 --> 00:09:26,950
I think this was looking pretty good right here.

139
00:09:26,950 --> 00:09:28,660
I think we've got a pretty good start.

140
00:09:28,780 --> 00:09:34,930
Let's take a quick break and then figure out how to wire up this query to work together with our song

141
00:09:34,930 --> 00:09:35,980
detail component.

