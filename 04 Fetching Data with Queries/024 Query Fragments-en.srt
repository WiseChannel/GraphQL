1
00:00:00,810 --> 00:00:07,200
Now that we've fully connected our schema of data so we can go from companies to users and from users

2
00:00:07,200 --> 00:00:13,350
to companies let's spend a little bit more time to talk about the syntax of the queries we've been making

3
00:00:13,710 --> 00:00:17,520
and expand on what we can do with the syntax in here just a little bit.

4
00:00:17,520 --> 00:00:22,200
In particular I want to point out two or three different things to you then why end up being useful

5
00:00:22,200 --> 00:00:24,430
on your own personal projects.

6
00:00:24,780 --> 00:00:28,800
First you may sometimes see these queries written like so.

7
00:00:28,850 --> 00:00:33,630
So sometimes you might see it written as saying hey specifically this is a query I'm about to make right

8
00:00:33,630 --> 00:00:34,460
here.

9
00:00:34,500 --> 00:00:36,920
Now that doesn't change the behavior of the query at all.

10
00:00:36,990 --> 00:00:40,150
It just kind of names the query and says Yup I'm making a query.

11
00:00:40,290 --> 00:00:42,320
That's pretty much it.

12
00:00:42,360 --> 00:00:48,060
What is a little bit more useful however is the ability to name the query so I could call it something

13
00:00:48,060 --> 00:00:59,720
like fetch company or maybe I can call it find company find company their real name in the query starts

14
00:00:59,720 --> 00:01:01,260
to a little bit more useful.

15
00:01:01,270 --> 00:01:06,190
When you're working on the front end and you might have many different queries running around and you

16
00:01:06,190 --> 00:01:11,080
may want to reuse these queries in different locations inside your codebase.

17
00:01:11,110 --> 00:01:17,020
So for use in graphical and not too useful but when you start to use this in the front end Name your

18
00:01:17,020 --> 00:01:20,170
query starts to get a little bit more helpful.

19
00:01:21,130 --> 00:01:26,110
The next thing I want to remind you about queries is that the opening set of curly braces right here

20
00:01:26,110 --> 00:01:32,040
we can kind of imagine that the overall query is being sent to a root query type.

21
00:01:32,080 --> 00:01:37,400
So on the root query type we are asking for something from the company field.

22
00:01:37,690 --> 00:01:43,810
So if we flip back over to our schema file and then scroll on down to the query type remember we've

23
00:01:43,810 --> 00:01:46,860
got the user field and the company field.

24
00:01:47,290 --> 00:01:53,200
The opening set of curly braces you can imagine that that entire query is being sent to this root query

25
00:01:53,200 --> 00:01:54,370
object right here.

26
00:01:54,610 --> 00:02:00,510
And we are asking for a user or a company from from there.

27
00:02:00,520 --> 00:02:03,350
Resolve functions take over and we've covered that.

28
00:02:03,580 --> 00:02:05,260
And we won't go down that path again.

29
00:02:05,260 --> 00:02:08,050
We've been down that road a couple of times.

30
00:02:08,530 --> 00:02:15,820
Now let's talk a little bit more about some syntax around queries we can freely ask for as many companies

31
00:02:15,850 --> 00:02:18,030
in a single query as we would like.

32
00:02:18,070 --> 00:02:23,630
So I can take the query up top and duplicate it down on below.

33
00:02:23,830 --> 00:02:27,530
And I can change the ID like so when I do that.

34
00:02:27,530 --> 00:02:30,890
However it says well you got a little bit of a problem here.

35
00:02:30,940 --> 00:02:37,720
You've got this same company or the same query name inside of the same query twice.

36
00:02:37,840 --> 00:02:41,970
So we are asking for company twice a year to get around this.

37
00:02:41,980 --> 00:02:49,840
We can name the result of the query when it comes back by writing out some arbitrary key in front of

38
00:02:49,840 --> 00:02:50,450
it.

39
00:02:50,530 --> 00:02:57,070
So I would say you know what whatever comes back from this query I want to be assigned to the key apple

40
00:02:57,340 --> 00:03:03,520
and then this one down here I want to assign the result to Google like so just to be 100 percent clear

41
00:03:03,550 --> 00:03:07,120
why we couldn't have company twice inside that query.

42
00:03:07,660 --> 00:03:14,650
Take a look at the response object that we have over here the response key is company and inside javascript

43
00:03:14,670 --> 00:03:17,560
we can cannot have duplicate keys on an object.

44
00:03:17,590 --> 00:03:22,570
So if we have company twice over here graphic you all just gets confused and it says hey you know what

45
00:03:22,600 --> 00:03:25,600
I don't want to put two keys on the object called Company.

46
00:03:25,660 --> 00:03:31,140
You need to rename at least one of them which we just did by calling one apple and the other Google.

47
00:03:31,540 --> 00:03:38,880
So now when we run this query the result is no longer called company and it is called Apple and Google.

48
00:03:38,950 --> 00:03:40,930
We do not have to rename both of them.

49
00:03:40,930 --> 00:03:42,610
We can rename just one of them.

50
00:03:42,640 --> 00:03:51,490
So the first one we called Apple and the second one company call I'm going to go back to claim the second

51
00:03:51,490 --> 00:03:56,890
one Google just because I like having it be a little bit more identical between the two.

52
00:03:57,730 --> 00:03:58,040
OK.

53
00:03:58,060 --> 00:04:03,570
Leslie I want to talk to you about is the use of what are called Querrey fragments.

54
00:04:03,640 --> 00:04:08,530
You might notice that in both of these company queries that we have right here we are listing out the

55
00:04:08,530 --> 00:04:16,300
properties ID name and description twice now I'm not one to complain about having to write these three

56
00:04:16,300 --> 00:04:20,340
terms in here twice in a row but some people really dislike that.

57
00:04:20,350 --> 00:04:25,750
In a big way and I would definitely agree if we had you know like many other properties on here like

58
00:04:25,750 --> 00:04:34,930
red blue green OK auto type or autocorrect is kind of taking over here but you can kind of imagine where

59
00:04:34,930 --> 00:04:35,820
it came from.

60
00:04:35,850 --> 00:04:37,710
We had many other properties on here.

61
00:04:37,720 --> 00:04:42,300
It would definitely get a little bit tiresome to have to duplicate them all over the place.

62
00:04:42,760 --> 00:04:50,080
So to solve this we can you make use of what are called queery fragments a query fragment is essentially

63
00:04:50,080 --> 00:04:53,970
just a list of different properties that we want to get access to.

64
00:04:54,430 --> 00:04:57,610
Let's define the fragment first and we'll see how we make use of it.

65
00:04:58,000 --> 00:05:07,690
So I'm going to define a fragment called company details on company and then I'll list out the properties

66
00:05:07,690 --> 00:05:10,480
that I want to be contained inside of this fragment.

67
00:05:10,480 --> 00:05:18,970
So Id name and description now rather than listing out the individual properties in both locations.

68
00:05:19,210 --> 00:05:24,210
I can simply write dot dot dot company details.

69
00:05:26,280 --> 00:05:31,130
Like so now when I run this query you still get the same thing over here.

70
00:05:31,150 --> 00:05:36,220
So the purpose of fragments is solely to reduce the amount of copy and paste of properties that you

71
00:05:36,220 --> 00:05:39,050
want to make inside of your query.

72
00:05:39,100 --> 00:05:44,710
Looking at the syntax of the fragment first we declare that we want to make a fragment we say that the

73
00:05:44,710 --> 00:05:51,840
fragment will be called company details and then very importantly we specify on company.

74
00:05:51,850 --> 00:05:56,410
This allows graph Cuil to do a little bit of type checking and make sure that the properties that we're

75
00:05:56,410 --> 00:06:01,450
asking for actually belong to the object that we are trying to pull them off of.

76
00:06:01,450 --> 00:06:08,230
So if I said that I want to pull maybe name and description off of a user which does not have a name

77
00:06:08,230 --> 00:06:09,370
and description.

78
00:06:09,370 --> 00:06:15,130
Now I get a nice error message that says hey your user object doesn't have anything called Name your

79
00:06:15,130 --> 00:06:17,340
user object doesn't have anything called description.

80
00:06:17,350 --> 00:06:18,580
You need to fix that.

81
00:06:18,850 --> 00:06:23,860
So the on blank part is really about doing a little bit of type checking just to make sure that we're

82
00:06:23,860 --> 00:06:26,020
not breaking the rules that we've set up with graphs.

83
00:06:26,030 --> 00:06:35,790
Well already in practice using fragments inside of graphical and not terribly common only somewhat common

84
00:06:36,000 --> 00:06:40,260
you'll see fragments way more frequently when you start to get in the front end as well.

85
00:06:40,260 --> 00:06:44,930
Again this is really a thing about drawing up your code or don't repeat yourself.

86
00:06:44,970 --> 00:06:49,040
So it's something you'll see much more frequently on the front end as opposed to something inside of

87
00:06:49,050 --> 00:06:51,110
graphical.

88
00:06:51,420 --> 00:06:55,400
OK so a couple of items about the syntax of queries.

89
00:06:55,600 --> 00:06:57,550
Let's continue on in the next section.

90
00:06:57,610 --> 00:07:02,140
And we're going to start talking about one of the more challenging aspects inside of graph QM.

