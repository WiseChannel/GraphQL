1
00:00:00,630 --> 00:00:05,190
I don't think there's any way I can delay getting started on the client side as application anymore.

2
00:00:05,190 --> 00:00:06,570
So let's get to it.

3
00:00:06,570 --> 00:00:09,550
It's time to work on the client side of our application.

4
00:00:09,730 --> 00:00:16,690
Inside my project directory I'm going to find my client folder and then open up the index file.

5
00:00:16,740 --> 00:00:19,200
This is the starting point of our application.

6
00:00:19,230 --> 00:00:23,970
And inside of here you'll notice that I've got a component defined as root where it currently is just

7
00:00:23,970 --> 00:00:27,530
showing a single div with the text lyrical inside of it.

8
00:00:27,930 --> 00:00:29,100
So this is what we're going to do.

9
00:00:29,100 --> 00:00:34,470
The vast majority of early work inside of our application for getting a couple of different pieces set

10
00:00:34,470 --> 00:00:37,810
up we are going to do all the Apollo setup and all the graph.

11
00:00:37,810 --> 00:00:39,480
Q All set up from scratch.

12
00:00:39,480 --> 00:00:42,730
So we're going to walk through that starting in this section right now.

13
00:00:43,110 --> 00:00:48,600
A lot of the work that we're going to do here is going to revolve around how we kind of wrap our react

14
00:00:48,600 --> 00:00:53,110
application with some helpers from the Apollo client library.

15
00:00:53,610 --> 00:00:58,400
So let's get a better idea or a better understanding of exactly how that's going to work.

16
00:00:58,870 --> 00:00:59,470
OK.

17
00:00:59,820 --> 00:01:05,640
So in this diagram kind of diagram out more or less how a react application is going to work with the

18
00:01:05,640 --> 00:01:05,970
graph.

19
00:01:05,970 --> 00:01:10,050
Q All server on our back end inside the box at the top.

20
00:01:10,110 --> 00:01:12,060
You'll see our re-act application.

21
00:01:12,060 --> 00:01:15,030
So our re-act up the view layer.

22
00:01:15,030 --> 00:01:20,180
The thing that produces HVM L is one very small piece of the puzzle here.

23
00:01:20,400 --> 00:01:24,330
We are going to spend a lot of work on the re-act application we're going spend a lot of time but it

24
00:01:24,330 --> 00:01:28,370
really is kind of a small piece of the puzzle.

25
00:01:28,770 --> 00:01:34,290
What's really important is to understand exactly how our react to application is going to work with

26
00:01:34,290 --> 00:01:41,970
the graphics server in-between or re-act application and the graph CULE server are two different important

27
00:01:41,970 --> 00:01:43,830
pieces of technology.

28
00:01:43,830 --> 00:01:46,700
The first is the Apollo provider.

29
00:01:46,710 --> 00:01:48,900
The second is the Apollo store.

30
00:01:48,930 --> 00:01:51,780
So let's talk about both those for a second.

31
00:01:51,840 --> 00:01:58,980
The Apollo store is what is going to communicate directly with the graphical server and store data that

32
00:01:58,980 --> 00:02:00,310
comes back from it.

33
00:02:00,510 --> 00:02:07,390
So we can think of this Appollo store as a store of data that exists on the client side of our application.

34
00:02:07,590 --> 00:02:13,860
The Apollo's store is a client side repository of all the data that is coming from the graph UL server

35
00:02:14,250 --> 00:02:19,260
and in this course in the section we're going to talk a lot about exactly what is going on inside of

36
00:02:19,260 --> 00:02:22,760
that store and what data is really being held inside of there as well.

37
00:02:24,090 --> 00:02:29,910
The Apollo store is a really a abstract piece of technology.

38
00:02:29,910 --> 00:02:34,830
It is something that doesn't really care about what client side framework we're using for showing data

39
00:02:34,830 --> 00:02:35,720
on the screen.

40
00:02:35,910 --> 00:02:42,300
So the Apollo store it has no idea intrinsically that react to react exists it doesn't know that we

41
00:02:42,300 --> 00:02:48,000
are using react and it doesn't care it could care less that we're using re-act the integration layer

42
00:02:48,000 --> 00:02:51,860
between the Apollo's store and our actual reactor application.

43
00:02:51,900 --> 00:02:54,040
Is the Apollo provider.

44
00:02:54,270 --> 00:02:58,260
So it's a provider of data to our react application.

45
00:02:58,290 --> 00:03:04,350
The provider will take data from the store and inject it into our re-act application.

46
00:03:04,350 --> 00:03:09,760
It is the glue layer between the Apollo's store and our actual re-act application.

47
00:03:09,780 --> 00:03:14,310
So a lot of the configuration and probably the vast majority of the configuration we're going to do

48
00:03:14,640 --> 00:03:20,760
is around the Apollo provider for the most part the Apollo store is going to be pretty standalone and

49
00:03:20,760 --> 00:03:26,210
we're not really going to have to touch it too much we'll create it you know we'll be making a store

50
00:03:26,430 --> 00:03:27,750
but that's pretty much it.

51
00:03:27,750 --> 00:03:30,150
We don't really do too much else around it.

52
00:03:30,150 --> 00:03:35,400
The vast majority of set up that we're going to do is going to be around the Apollo provider.

53
00:03:35,400 --> 00:03:39,540
So in this section we're going to continue with doing a little bit to set up the provider in the store

54
00:03:40,080 --> 00:03:46,170
and throughout the rest of the section we will also talk a lot more about exactly how the provider interacts

55
00:03:46,170 --> 00:03:49,470
with the store to get data into our application.

56
00:03:49,470 --> 00:03:50,220
So let's get to it.

57
00:03:50,220 --> 00:03:54,840
Let's make the provider lets get the stores set up and go from there.

58
00:03:54,900 --> 00:04:00,660
I'm going to go back over to my code editor and again I've got my index dot J.S. file inside of the

59
00:04:00,660 --> 00:04:03,020
client directory open right now.

60
00:04:03,090 --> 00:04:10,060
So I should see my re-act application the first thing that we're going to do is do a little bit of a

61
00:04:10,080 --> 00:04:17,460
refactor to this root component right here to create our new Appollo client and set up the Apollo provider.

62
00:04:17,560 --> 00:04:22,420
Now I've already installed the relevant libraries inside of this starter package so we don't need to

63
00:04:22,900 --> 00:04:24,430
install any modules here.

64
00:04:24,460 --> 00:04:29,500
They are already installed for us but for any package or any project that you're going to work on yourself

65
00:04:29,770 --> 00:04:33,000
you will want to install these modules yourself.

66
00:04:33,700 --> 00:04:40,820
So the first thing we're going to import will be the Apollo client from the library Apollo client.

67
00:04:40,930 --> 00:04:42,460
Again the Apollo client right here.

68
00:04:42,460 --> 00:04:45,290
This is what is actually interacting with our graph.

69
00:04:45,310 --> 00:04:51,310
You'll see her on the back end is what is actually making requests for data and then storing that data

70
00:04:51,310 --> 00:04:54,580
locally when the response comes back.

71
00:04:54,700 --> 00:05:01,620
Then we also are going to be working with the Apollo provider from react Apollo.

72
00:05:02,320 --> 00:05:08,470
So even in the two import statements you see right here we kind of get that sense that Apollo client

73
00:05:08,500 --> 00:05:11,610
really has no idea that we're working with re-act here.

74
00:05:11,620 --> 00:05:16,650
It really doesn't know we're importing this from a library called Apollo client.

75
00:05:16,660 --> 00:05:24,460
It is not tied to any specific client side rendering library like reactor angular or UJA Yes it is the

76
00:05:24,520 --> 00:05:29,230
re-act Apollo package that is saying OK I know how to work with a client.

77
00:05:29,230 --> 00:05:31,120
I also know how to work with react.

78
00:05:31,120 --> 00:05:35,000
I will take care of being the glue layer inside of this application.

79
00:05:36,470 --> 00:05:39,350
So now we can make use of that Apollo provider.

80
00:05:39,450 --> 00:05:43,140
We're going to do a little bit of factor inside the root component right here.

81
00:05:43,320 --> 00:05:46,950
Well first start off by placing an Apollo provider tag

82
00:05:50,470 --> 00:05:57,940
inside of that right now will place and div and all leave it just saying the words lyrical.

83
00:05:57,960 --> 00:06:00,260
That's all we need right now.

84
00:06:00,510 --> 00:06:06,810
Then the last thing we're going to do is create a new instance of the Apollo client and pass it to the

85
00:06:06,900 --> 00:06:08,690
Apollo provider.

86
00:06:08,790 --> 00:06:15,840
So online 6 right to both the re-act component will say Konst client is new Apollo clients.

87
00:06:15,840 --> 00:06:19,300
We're going to pass in an empty object for right now.

88
00:06:19,620 --> 00:06:25,170
Then we'll take that client and pass it to the Apollo provider.

89
00:06:25,170 --> 00:06:31,230
If you have any background with redux you might be saying hey this provider thing and this kind of client

90
00:06:31,230 --> 00:06:32,920
thing right here look kind of familiar.

91
00:06:33,210 --> 00:06:34,260
And the answer is yes.

92
00:06:34,260 --> 00:06:38,630
This draws heavily on the redux world if you're not familiar three and all.

93
00:06:38,700 --> 00:06:39,430
No problem.

94
00:06:39,450 --> 00:06:43,670
It is not requisite for understanding what's going on with Apollo.

95
00:06:43,680 --> 00:06:48,840
One thing I want to mention about the Apollo client is that we passed in an empty configuration object

96
00:06:48,840 --> 00:06:49,720
right here.

97
00:06:49,770 --> 00:06:54,990
So out of the box Apollo Klein is kind of nice in that it makes a couple assumptions about how your

98
00:06:54,990 --> 00:06:56,750
back end is set up.

99
00:06:56,790 --> 00:07:02,610
Everything we've done so far like all this code is all that is required for talent for getting Apollo

100
00:07:02,610 --> 00:07:04,990
to interact with our back end server.

101
00:07:05,010 --> 00:07:10,740
So you'll notice that we didn't have to tell Apollo client to go like look at some specific endpoint

102
00:07:10,800 --> 00:07:11,490
on our server.

103
00:07:11,490 --> 00:07:17,700
It just makes the assumption of where our graphical server is listening for incoming requests as we

104
00:07:17,700 --> 00:07:19,920
covered in our last application.

105
00:07:19,940 --> 00:07:23,140
We flip over to the server dot G-S file for just a second.

106
00:07:23,520 --> 00:07:26,180
So here's a server G-S I'm going to scroll down.

107
00:07:26,520 --> 00:07:32,150
If you recall we had set up that express graphical server to listen to the slash graphical endpoint

108
00:07:32,160 --> 00:07:33,750
on our server.

109
00:07:33,750 --> 00:07:40,140
So we are listening on a very specific endpoint for incoming graph CULE requests the Apollo store or

110
00:07:40,140 --> 00:07:46,020
the Apollo client that we just created right here assumes that the graph Cuil server is available on

111
00:07:46,020 --> 00:07:48,070
the slash graph route.

112
00:07:48,090 --> 00:07:53,370
So there is some kind of assumptions made by this Apollo client right here on exactly how your back

113
00:07:53,370 --> 00:07:54,300
end is set up.

114
00:07:54,660 --> 00:07:58,500
If you start to deviate from those assumptions you're going to have to start to add a little bit more

115
00:07:58,500 --> 00:08:00,830
configuration inside this object right here.

116
00:08:00,870 --> 00:08:05,140
But for the vast vast majority of applications you'll probably ever work on.

117
00:08:05,330 --> 00:08:10,020
The assumptions are going to line up pretty well and you won't really need have need to have to add

118
00:08:10,020 --> 00:08:13,400
in any additional configuration.

119
00:08:13,420 --> 00:08:18,330
The last thing I want to mention about the Apollo provide right here again it is the glue layer between

120
00:08:18,330 --> 00:08:24,470
react and the Apollo world or the kind of graft you overhauled the Apollo provider itself.

121
00:08:24,480 --> 00:08:30,300
It is a re-act component which is why we're using GSX tags around it and we're passing it the client

122
00:08:30,360 --> 00:08:32,840
as a prop.

123
00:08:33,180 --> 00:08:39,060
Again we will come back a little bit later and talk about exactly how Apollo provider is shoveling data

124
00:08:39,120 --> 00:08:41,300
over to the re-act side of our application.

125
00:08:41,470 --> 00:08:45,690
All I really want to say right now is just to point out that yes it is a real life component and we

126
00:08:45,690 --> 00:08:49,750
are passing it a reference to the Apollo store.

127
00:08:50,060 --> 00:08:50,490
OK.

128
00:08:50,490 --> 00:08:55,590
So it's kind of a you know high level of you on this set up around the graph kewl stuff of our application.

129
00:08:55,620 --> 00:08:57,480
Believe it or not like this is it.

130
00:08:57,510 --> 00:09:00,850
This is the minimum configuration for Apollo right here.

131
00:09:00,870 --> 00:09:06,510
We can now start making graph cool queries inside of our code and they would work like really it would

132
00:09:06,510 --> 00:09:08,520
work right out of the box.

133
00:09:08,520 --> 00:09:13,170
We are going to do a little bit more work in this application because we have multiple streams of data

134
00:09:13,170 --> 00:09:14,100
that we want to show.

135
00:09:14,160 --> 00:09:18,410
So we will be bringing in re-act router as well to show those different screens.

136
00:09:18,510 --> 00:09:21,430
So we will do a little bit more set up in this file right here.

137
00:09:21,480 --> 00:09:26,310
But again I just want to you know point out yeah there's not too much configuration that goes on to

138
00:09:26,350 --> 00:09:28,580
get Apollo worked in wealth.

139
00:09:29,310 --> 00:09:36,330
That is at great odds with relais which we had spoken about previously really requires a lot of client

140
00:09:36,330 --> 00:09:37,320
side set up.

141
00:09:37,440 --> 00:09:43,950
And in my mind that's another big pro a big benefit going for Apollo over using relays so just another

142
00:09:44,240 --> 00:09:48,320
kind of data point to keep in mind of comparison between these different libraries.

143
00:09:48,840 --> 00:09:49,380
OK.

144
00:09:49,390 --> 00:09:53,850
Lesing we're going to do inside the section is refresh our browser and just see.

145
00:09:53,880 --> 00:09:55,320
Hey how's everything working.

146
00:09:55,320 --> 00:09:56,040
Is it broken.

147
00:09:56,040 --> 00:09:57,200
What's going on.

148
00:09:57,330 --> 00:10:04,230
So I can open up a new tab I think we've got a local post 4000 and we'll just verify is it working.

149
00:10:04,230 --> 00:10:05,340
Is it broken.

150
00:10:05,360 --> 00:10:05,930
It looks like.

151
00:10:05,940 --> 00:10:06,390
OK.

152
00:10:06,480 --> 00:10:08,510
Yup looks like it still works.

153
00:10:08,520 --> 00:10:10,950
So everything has gone pretty well so far.

154
00:10:10,950 --> 00:10:15,100
Let's continue in the next section and continue working on our application.

